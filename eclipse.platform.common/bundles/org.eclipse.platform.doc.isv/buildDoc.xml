<?xml version="1.0" encoding="UTF-8"?>
<project name="Platform Doc Isv Build" default="all"  basedir="." >

	<property file="${basedir.properties}"/>

	<target name="init">
	    <property environment="env" />
        <echo message="env.JAVA_DOC_PROXIES: ${env.JAVA_DOC_PROXIES}" />
		<available file="${basedir}/index" property="index.present"/>
	</target>

	<target name="all" depends="init" unless="index.present">
		<antcall target="convertSchemaToHtml" />
		<antcall target="examplesDocCopy" />
		<antcall target="generateJavadoc" />
	</target>

	<target name="convertSchemaToHtml" if="eclipse.running">
		<property name="dest" value="reference/extension-points" />
		<property name="platformSearchPath" value="${eclipse.platform.ant},${eclipse.platform.debug},${eclipse.platform.platform},${eclipse.platform.resources.bundles},${eclipse.platform.runtime.bundles},${eclipse.platform.swt.bundles},${eclipse.platform.team.bundles},${eclipse.platform.ua},${eclipse.platform.ui.bundles}" />
		<property name="runtimeSearchPath" value="${rt.equinox.bundles.bundles},${rt.equinox.framework.bundles},${rt.equinox.p2.bundles}" />
		<property name="searchPaths" value="${platformSearchPath},${runtimeSearchPath}" />

		<record name="${basedir}/target/platformconvert.txt" loglevel="warn" action="start"/>
		<!--copy extra files linked to by generated extension point doc-->
		<copy file="${eclipse.platform.ua}/org.eclipse.ui.cheatsheets/schema/cheatSheetContentFileSpec.html" todir="${dest}"/>
		<copy file="${eclipse.platform.ua}/org.eclipse.ui.cheatsheets/schema/cheatSheetContentFileSpec.exsd" todir="${dest}"/>
		<copy file="${eclipse.platform.ua}/org.eclipse.ui.cheatsheets/schema/compositeContentFile.html" todir="${dest}"/>
		<copy file="${eclipse.platform.ua}/org.eclipse.ui.cheatsheets/schema/compositeContentFile.exsd" todir="${dest}"/>
		<!--copy extra HTML file linked to by generated extension point doc-->
		<copy file="${eclipse.platform.ua}/org.eclipse.ui.intro/schema/introContentFileSpec.html" todir="${dest}"/>
		<record name="${basedir}/target/platformconvert.txt" action="stop"/>
	</target>

	<target name="examplesDocCopy" >
		<copy todir="samples">
			<fileset dir="${eclipse.platform.team.examples}">
				<include name="org.eclipse.compare.examples/doc-html/"/>
				<include name="org.eclipse.compare.examples.xml/doc-html/"/>
				<include name="org.eclipse.team.examples.filesystem/doc-html/"/>
			</fileset>
		</copy>
		<copy todir="samples">
			<fileset dir="${eclipse.platform.swt.examples}">
				<include name="org.eclipse.swt.examples/doc-html/"/>
				<include name="org.eclipse.swt.examples.views/doc-html/"/>
				<include name="org.eclipse.swt.examples.launcher/doc-html/"/>
				<include name="org.eclipse.swt.examples.ole.win32/doc-html/"/>
			</fileset>
		</copy>
		<copy todir="samples">
			<fileset dir="${eclipse.platform.ui.examples}">
				<include name="org.eclipse.ui.examples.fieldassist/doc-html/"/>
				<include name="org.eclipse.ui.examples.multipageeditor/doc-html/"/>
				<include name="org.eclipse.ui.examples.propertysheet/doc-html/"/>
				<include name="org.eclipse.ui.examples.readmetool/doc-html/"/>
				<include name="org.eclipse.ui.examples.undo/doc-html/"/>
				<include name="org.eclipse.ui.examples.javaeditor/doc-html/"/>
			</fileset>
		</copy>
	</target>

	<target name="getJavadocPath" depends="getEclipseJavadocPath" unless="javadocExecutable">
		<!-- WARNING: Ant bug: The <available> task overrides an already set property! https://bugs.eclipse.org/431236#c12 -->
		<available file="${java.home}/../bin/javadoc.exe" property="javadocExecutable" value="${java.home}/../bin/javadoc.exe"/>
		<available file="${java.home}/../bin/javadoc" property="javadocExecutable" value="${java.home}/../bin/javadoc" />

		<available file="${java.home}/bin/javadoc.exe" property="javadocExecutable" value="${java.home}/bin/javadoc.exe"/>
		<available file="${java.home}/bin/javadoc" property="javadocExecutable" value="${java.home}/bin/javadoc" />
	</target>

	<target name="getEclipseJavadocPath" unless="javadocExecutable">
		<!-- Use custom javadoc executable if ${eclipse.javadoc} is set -->
		<condition property="javadocExecutable" value="${eclipse.javadoc}">
		  <and>
		     <isset property="eclipse.javadoc"/>
		     <available file="${eclipse.javadoc}" />
		  </and>
		</condition>
	</target>

	<target name="generateJavadoc" depends="getJavadocPath" if="javadocExecutable">
		<!-- replace "\n;" with platform-dependent list entry delimiter -->
		<property name="optionsFile" value="target/platformOptions.tmp.txt" />
		<copy file="platformOptions.txt" tofile="${optionsFile}" overwrite="true">
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>

		<condition property="argsListDelimiter" value=":">
			<os family="unix" />
		</condition>
		<condition property="argsListDelimiter" value=";">
			<os family="windows" />
		</condition>

		<replaceregexp file="${basedir}/${optionsFile}" flags="g" match="(\r\n?|\n);" replace="${argsListDelimiter}" />
		<replace file="${basedir}/${optionsFile}" token="@rt@" value="target/dependency/jakarta.annotation-api-1.3.5.jar:target/dependency/jakarta.inject-api-1.0.5.jar" />

		<!-- expand _* to actual version -->
			<!-- prepare ${replaceFile} with all files and folders from workspace -->
		<fileset dir="${basedir}/${dependency.dir}" id="fileSet">
			<include name="*"/>
		</fileset>
		<dirset dir="${basedir}/${dependency.dir}" id="dirSet">
			<include name="*"/>
		</dirset>
		<pathconvert property="fileList" refid="fileSet" dirsep="/" pathsep="&#xA;"/>
		<pathconvert property="dirList" refid="dirSet" dirsep="/" pathsep="&#xA;"/>
		<property name="replaceFile" value="target/platformOptions.replace.txt" />
		<echo file="${basedir}/${replaceFile}">${fileList}&#xA;&#xA;${dirList}&#xA;&#xA;</echo>

<echo>org.eclipse.platform.doc.isv/buildDoc.xml - generateJavadoc:
      Using javadocExecutable: ${javadocExecutable}</echo>
<!--
<echo>${basedir}/${replaceFile} before _* expansion:</echo>
<concat><filelist files="${basedir}/${replaceFile}"></filelist></concat>
-->

			<!-- strip away leading path -->
		<replaceregexp file="${basedir}/${replaceFile}" flags="g" match="(?m)^.*/([^/]*)$$" replace="\1" />
			<!-- create "<aa>_*[.jar]=<aa><version>[.jar]" property for lines with a version -->
		<replaceregexp file="${basedir}/${replaceFile}" flags="g" match="(?m)^(.*)[-_]\d+\.\d+(\.\d+)?.*?(.jar)?$$" replace="\1_*\3=\0" />

<!--
<echo>${basedir}/${replaceFile} after _* expansion:</echo>
<concat><filelist files="${basedir}/${replaceFile}"></filelist></concat>
-->

		<!-- workaround for bug 402392, which can make the ${replaceFile} end up empty: -->
		<echo file="${basedir}/${replaceFile}" append="true">dummyForBug402392=dummyForBug402392&#xA;</echo>

		<replace file="${basedir}/${optionsFile}" replacefilterfile="${basedir}/${replaceFile}"/>

<!--
<echo>${basedir}/${optionsFile} after _* expansion:</echo>
<concat><filelist files="${basedir}/${optionsFile}"></filelist></concat>
-->

		<!--scrub isv plugin directories of any preexisting api doc content-->
		<delete dir="reference/api"/>
		<mkdir dir="reference/api"/>

	  <!-- if not pass in from environment, set this value to empty -->
	  <property name="env.JAVA_DOC_PROXIES" value=""/>

		<exec dir="." executable="${javadocExecutable}" output="target/doc.bin.log" timeout="600000">
			<arg line="@${basedir}/${optionsFile} -J-Xmx1000M ${env.JAVA_DOC_PROXIES}"  />
		</exec>


		<!--workaround for bug 409511, bug 101048-->
		<replace dir="reference/api" token="='/../misc/api-usage-rules.html" value="='./../misc/api-usage-rules.html">
			<include name="*.htm*" />
		</replace>

	</target>

</project>

