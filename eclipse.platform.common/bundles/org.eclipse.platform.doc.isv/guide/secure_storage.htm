<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html lang="en">
<HEAD>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2008. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Secure storage</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY>
<H2>
Secure storage</H2>

<p>You can use secure storage to persist sensitive data (such as login credentials) in an encrypted form.</p> 

<p>Secure storage takes care of a chicken-and-egg problem of &quot;needing to get a password to encrypt 
a password&quot; and organizes data in a hierarchical form. It provides a central secure repository 
for the application.</p> 

<p>Secure storage is intended to store data that is relatively small in size. There is no hard cap limit at this 
time on the data size, but it is advisable to keep size of an entry under a kilobyte. If you do need to encrypt 
a large size object, consider creating a random key and using it with Java PBE encryption to encrypt your data. 
You can then store the key used to encrypt the object in secure storage. Later you can obtain the key from 
secure storage to decrypt the data.</p>

<p>The secure storage can be extended by supplying custom password provider modules and custom encryption 
algorithms. Multiple secure storages can be created and maintained at any time using different 
customizations.</p>

<p>This collection of topics describes how your code can utilize the secure storage. It assumes familiarity 
with the concepts described in the 
<a href="../../org.eclipse.platform.doc.user/reference/ref-securestorage-works.htm"><b>user documentation</b></a>.</p>

</BODY>
</HTML>