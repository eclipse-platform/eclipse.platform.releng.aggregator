pipeline {
	options {
		timestamps()
		timeout(time: 12, unit: 'HOURS')
		buildDiscarder(logRotator(numToKeepStr:'5'))
		disableConcurrentBuilds(abortPrevious: true)
		skipDefaultCheckout()
	}
	agent {
		label 'performance' //FIXME/TODO: that machine cannot run a current Eclipse anymore.
	}
	stages {
		stage('Launch performance tests') {
			environment {
				// Declaring a jdk and ant the usual way in the 'tools' section, because of unknown reasons, breaks the usage of system commands like xvnc, pkill and sh
				JAVA_HOME = installTemurinJDK('21', 'linux', 'x86_64')
				ANT_HOME = tool(type:'ant', name:'apache-ant-latest')
				PATH = "${JAVA_HOME}/bin:${ANT_HOME}/bin:${PATH}"
			}
			matrix {
				axes {
					axis {
						name 'CONFIGURATION'
						//FIXME/TODO: check what's the difference between the I- and ILR (latest-release?) performance tests?
						// By default there is none, so it can maybe be streamlined
						values \
							'I-linux.x86_64-baseline', \
							'I-linux.x86_64', \
							'ILR-linux.x86_64-baseline', \
							'ILR-linux.x86_64'
					}
				}
				stages {
					stage('Run performance tests') {
						environment {
							baselinePerf = "${env.CONFIGURATION.endsWith('-baseline')}"
							WORKSPACE = "${WORKSPACE}/${CONFIGURATION}"
							ANT_OPTS = "-Djava.io.tmpdir=${WORKSPACE}/tmp"
						}
						steps {
							cleanWs(patterns: [[pattern: 'java/**', type: 'EXCLUDE']]) // Don't delete downloaded JDK
							dir("${CONFIGURATION}") {
								xvnc(useXauthority: true) {
									sh '''#!/bin/bash -x
										buildId=$(echo $buildId|tr -d ' ')
										testToRun=$(echo $testToRun|tr -d ' ')
										echo "whoami: $(whoami)"
										echo "uname -a: $(uname -a)"
										
										# 0002 is often the default for shell users, but it is not when ran from
										# a cron job, so we set it explicitly, to be sure of value, so releng group has write access to anything
										# we create on shared area.
										oldumask=$(umask)
										umask 0002
										echo "umask explicitly set to 0002, old value was $oldumask"
										
										# we want java.io.tmpdir to be in $WORKSPACE, but must already exist, for Java to use it.
										mkdir -p tmp
										
										curl -o getEBuilder.xml https://download.eclipse.org/eclipse/relengScripts/testScripts/bootstrap/getEBuilder.xml
										
										echo JAVA_HOME: $JAVA_HOME
										echo ANT_HOME: $ANT_HOME
										echo PATH: $PATH
										echo baselinePerf: $baselinePerf
										
										env 1>envVars.txt 2>&1
										ant -diagnostics 1>antDiagnostics.txt 2>&1
										java -XshowSettings -version 1>javaSettings.txt 2>&1
										
										ant -f getEBuilder.xml -DbuildId=${buildId} -DbaselinePerf=${baselinePerf} \
										  -Dosgi.os=linux -Dosgi.ws=gtk -Dosgi.arch=x86_64 \
										  -DtestSuite=${testToRun} -Dtest.target=performance
									'''
								}
							}
							
							junit keepLongStdio: true, testResults: '**/eclipse-testing/results/xml/*.xml'
							build job: 'Releng/collectPerfResults', wait: false, parameters: [
							  string(name: 'triggeringJob', value: "${JOB_BASE_NAME}"),
							  string(name: 'buildURL', value: "${BUILD_URL}"),
							  string(name: 'buildID', value: "${params.buildId}")
							]
						}
						post {
							always {
								archiveArtifacts '**/eclipse-testing/results/**, **/eclipse-testing/directorLogs/**, *.properties, *.txt'
							}
						}
					}
				}
			}
		}
	}
	post {
		always {
			cleanWs()
		}
	}
}

def installTemurinJDK(String version, String os, String arch, String releaseType='ga') {
	dir ("${WORKSPACE}/java") {
		sh "curl -L https://api.adoptium.net/v3/binary/latest/${version}/${releaseType}/${os}/${arch}/jdk/hotspot/normal/eclipse | tar -xzf -"
		return "${pwd()}/" + sh(script: 'ls', returnStdout: true).strip()
	}
}
