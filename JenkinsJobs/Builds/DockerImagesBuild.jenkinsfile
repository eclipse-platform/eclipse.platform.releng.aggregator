pipeline {
	options {
		timeout(time: 2, unit: 'HOURS')
		buildDiscarder(logRotator(numToKeepStr:'5'))
		disableConcurrentBuilds(abortPrevious: true)
		timestamps()
	}
	triggers {
		cron '@weekly'
	}
	agent {
		label 'docker-build'
	}
	stages {
		stage('Get Docker Files') {
			steps {
				cleanWs()
				sh '''
					git clone -b master https://github.com/eclipse-platform/eclipse.platform.releng.aggregator.git
					git clone -b master https://github.com/eclipse-jdt/eclipse.jdt.core
				'''
			}
		}
		stage('Build and push Docker Images') {
			steps {
				script {
					dir('eclipse.platform.releng.aggregator/cje-production/dockerfiles') {
						parallel(
							'centos9-gtk4': { buildAndPushImage('centos-gtk4-mutter/9-gtk4', 'eclipse/platformreleng-centos-gtk4-mutter:9') },
							'centos9-gtk4-swt': { buildAndPushImage('centos-gtk4-mutter/9-swtBuild', 'eclipse/platformreleng-centos-swt-build:9') },
							'ubuntu-gtk3': { buildAndPushImage('ubuntu-gtk3-metacity/22.04-gtk3', 'eclipse/platformreleng-ubuntu-gtk3-metacity:22.04') },
							'opensuse-gtk3': { buildAndPushImage('opensuse-gtk3-metacity/15-gtk3', 'eclipse/platformreleng-opensuse-gtk3-metacity:15') },
						failFast: false)
					}
					dir('eclipse.jdt.core/org.eclipse.jdt.core/docker') {
						parallel(
							'jikespg': { buildAndPushImage('jikespg', 'eclipse/platformreleng-ubuntu-gtk3-metacity:jikespg') },
						failFast: false)
					}
				}
			}
		}
		stage('Clean Docker Images') {
			steps {
				sh '''
					docker images
					docker system prune -a -f
					docker images
				'''
			}
		}
	}
	post {
		unsuccessful {
			emailext body: "Container images used for testing eclipse platform - Build Unsuccessful. Please go to ${BUILD_URL}console and check the log",
			subject: "Container images - Build Unsuccessful", 
			to: "platform-releng-dev@eclipse.org",
			from:"genie.releng@eclipse.org"
		}
		always {
			cleanWs()
		}
	}
}

def buildAndPushImage(directory, imageId) {
	withDockerRegistry([credentialsId: 'docker.com-bot', url: '']) {
		sh """
			pushd ${directory}
			docker build --pull -t ${imageId} .
			docker push ${imageId}
			popd
		"""
	}
}
