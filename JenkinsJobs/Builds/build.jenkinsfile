@groovy.transform.Field
def BUILD = null

pipeline {
	options {
		timeout(time: 360, unit: 'MINUTES')
		timestamps()
		buildDiscarder(logRotator(numToKeepStr:'25', artifactNumToKeepStr: '3'))
	}
  agent {
    kubernetes {
      inheritFrom 'ubuntu-2404'
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: "jnlp"
    resources:
      limits:
        memory: "8Gi"
        cpu: "4000m"
      requests:
        memory: "6Gi"
        cpu: "2000m"
"""
    }
  }
	tools {
		jdk 'temurin-jdk21-latest'
		maven 'apache-maven-latest'
		ant 'apache-ant-latest'
	}
	environment {
		MAVEN_OPTS = '-Xmx4G'
		CJE_ROOT = "${WORKSPACE}/cje-production"
		AGG_DIR = 'gitCache/eclipse.platform.releng.aggregator'
		logDir = "$CJE_ROOT/buildlogs"
	}
	stages {
		stage('Set up environment') {
			steps {
				script { // Extend build configuration with data from the configuration file
					def matcher = "$JOB_BASE_NAME" =~ '(?<type>[IY])-build-(?<major>\\d).(?<minor>\\d+)'
					if (!matcher) {
						error("Unsupported job: $JOB_BASE_NAME")
					}
					assignEnvVariable('BUILD_TYPE', matcher.group('type'))
					def configurations = readJSON(file: "${WORKSPACE}/JenkinsJobs/buildConfigurations.json")
					BUILD = configurations["${BUILD_TYPE}"]
					assignEnvVariable('BUILD_TYPE_NAME', BUILD.typeName)
					assignEnvVariable('GIT_SUBMODULE_BRANCHES', BUILD.branches ? BUILD.branches.collect{ name, branch -> "${name}:${branch}" }.join(',') : '')
					assignEnvVariable('TEST_NAME_PREFIX', "ep${matcher.group('major')}${matcher.group('minor')}${BUILD_TYPE}-unit")
					assignEnvVariable('TEST_CONFIGURATIONS_EXPECTED', BUILD.tests.collect{ c ->
						"${TEST_NAME_PREFIX}-${c.os}-${c.arch}-java${c.javaVersion}_${c.os}.${c.ws}.${c.arch}_${c.javaVersion}"
					}.join(','))
				}
				dir("${CJE_ROOT}") {
					sh '''
						set -eo pipefail
						chmod +x mbscripts/*
						mkdir -p $logDir
						
						./mbscripts/mb010_createEnvfiles.sh ${CJE_ROOT}/buildproperties.shsource 2>&1 | tee $logDir/mb010_createEnvfiles.sh.log
					'''
				}
				script {
					def buildProps = readBuildProperties("${CJE_ROOT}/buildproperties.properties")
					assignEnvVariable('BUILD_IID', buildProps.BUILD_TYPE + buildProps.TIMESTAMP)
					assignEnvVariable('STREAM', buildProps.STREAM)
					assignEnvVariable('RELEASE_VER', buildProps.RELEASE_VER)
				}
			}
		}
		stage('Clone and tag Build Inputs') {
			environment {
				AGGREGATOR_LOCAL_BRANCH = "${scm.branches[0].name}"
				AGGREGATOR_REPOSITORY_URL = "${scm.userRemoteConfigs[0].url}" // http(s) URL expected
			}
			steps {
				dir("${CJE_ROOT}/${AGG_DIR}") {
					sh '''#!/bin/bash -xe
						source $CJE_ROOT/buildproperties.shsource
						
						git config --global user.email 'releng-bot@eclipse.org'
						git config --global user.name 'Eclipse Releng Bot'
						
						# Clone this repo and all submodules into the 'AGG_DIR' directory
						git clone --branch=${AGGREGATOR_LOCAL_BRANCH} --recurse-submodules --remote-submodules \
							${AGGREGATOR_REPOSITORY_URL} .
						
						if [ -n "${GIT_SUBMODULE_BRANCHES}" ]; then
							for submodule in ${GIT_SUBMODULE_BRANCHES//,/ }; do
								path=$(echo "$submodule" | cut -d: -f1)
								branch=$(echo "$submodule" | cut -d: -f2)
								pushd "${path}"
									git checkout ${branch}
									git pull
								popd
							done
						fi
						
						# Create 'Build input' commit (considering commits potentially submitted to the aggregator BRANCH in the meantime)
						git checkout ${AGGREGATOR_LOCAL_BRANCH}
						git pull
						git commit --all --message="Build input for build $BUILD_ID" || echo 'No submodule changes'
					'''
					sshagent (['projects-storage.eclipse.org-bot-ssh']) {
						// Try to find the last tag of the current build type that is available as a promoted build
						// by checking the most recent 5 tags and seeing if an update site for it exists
						sh '''#!/bin/bash -xe
							source $CJE_ROOT/buildproperties.shsource
							updateSiteRootPath=/home/data/httpd/download.eclipse.org/eclipse/updates/${STREAMMajor}.${STREAMMinor}-${BUILD_TYPE}-builds
							lastTagList=$(git tag --list "${BUILD_TYPE}*" | tail -n5 | tac)
							for lt in ${lastTagList}; do
								if ssh genie.releng@projects-storage.eclipse.org test -d ${updateSiteRootPath}/${lt} ; then
									echo "$lt" > "${WORKSPACE}/lastTag"
									exit 0
								fi
							done
							# if no build is promoted yet, then just fallback to the last tag of the current build type
							git describe --tags --match "${BUILD_TYPE}*" --abbrev=0 > "${WORKSPACE}/lastTag"
						'''
					}
					script { // Check for changes and abort if nothing changed since the last build
						def boolean isScheduledBuild = !currentBuild.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause').isEmpty()
						if (isScheduledBuild && sh(script: 'git diff $(cat "${WORKSPACE}/lastTag")..HEAD --name-only', returnStdout: true).trim().isEmpty()) {
							emailext subject: "${RELEASE_VER} ${BUILD_TYPE}-Build: ${BUILD_IID} - Build skipped", body: """\
								No changes have been made since the last successful ${BUILD_TYPE}-Build and therefore this scheduled build was skipped:
								${BUILD_URL}console
								""".stripIndent(), mimeType: 'text/plain',
								to: "${BUILD.mailingList}", from: 'genie.releng@eclipse.org'
							currentBuild.result = 'ABORTED'
							error('Abort scheduled build due to no changes')
						}
					}
					// Create git tags and push changes
					sshagent (['github-bot-ssh']) {
						sh '''#!/bin/bash -xe
							source $CJE_ROOT/buildproperties.shsource
							
							function remoteURL {
								git config remote.origin.url | sed --expression 's,https://github.com/,git@github.com:,'
							}
							export -f remoteURL
							if [ "${BUILD_TYPE}" == "I" ]; then
								git push --verbose $(remoteURL) ${AGGREGATOR_LOCAL_BRANCH}
							fi
							function tagAndPush {
								git tag ${BUILD_ID} HEAD
								git push --verbose $(remoteURL) tag ${BUILD_ID}
							}
							export -f tagAndPush
							git submodule foreach 'tagAndPush'
							tagAndPush
						'''
					}
					// Git log creation
					sh '''#!/bin/bash -xe
						source $CJE_ROOT/buildproperties.shsource
						reportTimestamp=$(TZ="America/New_York" date +%Y%m%d-%H%M)
						export lastTag=$(cat "${WORKSPACE}/lastTag")
						if [[ -n "$lastTag" ]]; then
							export gitLogFile="$CJE_ROOT/$DROP_DIR/$BUILD_ID/gitLog.html"
							mkdir -p $(dirname "${gitLogFile}")
							
							echo -e "<h2>Git log from $lastTag (previous) to $BUILD_ID (current)</h2>" > $gitLogFile
							echo -e "<h2>The tagging, and this report, were done at about $reportTimestamp</h2>" >> $gitLogFile
							
							function createGitLog() {
								gitURL=$(git config remote.origin.url | sed --expression 's,git@github.com:,https://github.com/,' | sed 's/\\.git$//')
								gitName="${gitURL##*/}"
								gitLog=$(git log $lastTag..$BUILD_ID --date=short --format=format:"<tr><td class=\"datecell\">%cd</td><td class=\"commitcell\"><a href=\"${gitURL}/commit/%H\">%s</a></td><td class=\"authorcell\">%aN</td></tr>")
								if [ -n "$gitLog" ]; then
									echo "Record changes in ${gitName}"
									echo "<table><tbody> <tr><th class=\"cell\" colspan=\"3\">Repository: ${gitName}</th></tr>" >> $gitLogFile
									echo "<tr> <th class=\"datecell\">Date</th> <th class=\"commitcell\">Commit message</th> <th class=\"authorcell\">Author</th> </tr>" >> $gitLogFile
									echo "${gitLog}" >> $gitLogFile
									echo "</tbody></table><br><br>" >> $gitLogFile
									echo '' >> $gitLogFile
								fi
							}
							export -f createGitLog
							createGitLog
							git submodule foreach 'createGitLog'
						else
							echo -e "\n\tGit log not generated because a reasonable previous tag could not be found." > $gitLogFile
						fi
					'''
				}
			}
		}
	  stage('Create Base builder'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
		      sshagent(['projects-storage.eclipse.org-bot-ssh']) {
		                sh '''
		                    set -eo pipefail
		                    ./mb020_createBaseBuilder.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb020_createBaseBuilder.sh.log
		                '''
		        }
				}
			}
		}
	  stage('Download reference repo for repo reports'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                  sshagent(['projects-storage.eclipse.org-bot-ssh']) {
                    sh '''
                        set -eo pipefail
                        ./mb030_downloadBuildToCompare.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb030_downloadBuildToCompare.sh.log
                    '''
                  }
				}
			}
		}
	  stage('Aggregator maven build'){
	      environment {
                KEYRING = credentials('secret-subkeys-releng.asc')
                MAVEN_GPG_PASSPHRASE = credentials('secret-subkeys-releng.asc-passphrase')
          }
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                    sh '''
                        set -eo pipefail
                        ./mb220_buildSdkPatch.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb220_buildSdkPatch.sh.log
                    '''
				}
			}
		}
	  stage('Gather Eclipse Parts'){
	      environment {
                KEYRING = credentials('secret-subkeys-releng.asc')
                KEYRING_PASSPHRASE = credentials('secret-subkeys-releng.asc-passphrase')
          }
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                          sh '''
                            set -eo pipefail
                            bash -x ./mb300_gatherEclipseParts.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb300_gatherEclipseParts.sh.log
                          '''
				}
			}
		}
	  stage('Gather Equinox Parts'){
	  environment {
                KEYRING = credentials('secret-subkeys-releng.asc')
                KEYRING_PASSPHRASE = credentials('secret-subkeys-releng.asc-passphrase')
          }
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                          sh '''
                            set -eo pipefail
                            ./mb310_gatherEquinoxParts.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb310_gatherEquinoxParts.sh.log
                          '''
				}
			}
		}
	  stage('Generate Repo reports'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                      sh '''
                        set -eo pipefail
                        ./mb500_createRepoReports.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb500_createRepoReports.sh.log
                      '''
				}
			}
		}
	  stage('Generate API tools reports'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                      sh '''
                        set -eo pipefail
                        ./mb510_createApiToolsReports.sh $CJE_ROOT/buildproperties.shsource 2>&1 | tee $logDir/mb510_createApiToolsReports.sh.log
                      '''
				}
			}
		}
		stage('Export environment variables stage 2'){
			steps {
				script {
					def buildProps = readBuildProperties("${CJE_ROOT}/buildproperties.properties")
					env.COMPARATOR_ERRORS_SUBJECT = buildProps.COMPARATOR_ERRORS_SUBJECT
				}
			}
		}
	  stage('Archive artifacts'){
          steps {
                sh '''
                    source $CJE_ROOT/buildproperties.shsource
                    cp -r $logDir/* $CJE_ROOT/$DROP_DIR/$BUILD_ID/buildlogs
                    rm -rf $CJE_ROOT/$DROP_DIR/$BUILD_ID/apitoolingreference
                    cp $CJE_ROOT/buildproperties.* $CJE_ROOT/$DROP_DIR/$BUILD_ID
                    cp $CJE_ROOT/$DROP_DIR/$BUILD_ID/buildproperties.* $CJE_ROOT/$EQUINOX_DROP_DIR/$BUILD_ID
                '''
            }
		}
	  stage('Promote Eclipse platform'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                  sshagent(['projects-storage.eclipse.org-bot-ssh']) {
                      sh '''
                        ./mb600_promoteEclipse.sh $CJE_ROOT/buildproperties.shsource
                      '''
                  }
                build job: 'Releng/updateIndex', wait: false
				}
			}
		}
	  stage('Promote Equinox'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                  sshagent(['projects-storage.eclipse.org-bot-ssh']) {
                      sh '''
                        ./mb610_promoteEquinox.sh $CJE_ROOT/buildproperties.shsource
                      '''
                  }
				}
			}
		}
	  stage('Promote Update Site'){
          steps {
				dir("${CJE_ROOT}/mbscripts") {
                  sshagent(['projects-storage.eclipse.org-bot-ssh']) {
                      sh '''
                        ./mb620_promoteUpdateSite.sh $CJE_ROOT/buildproperties.shsource
                      '''
                  }
					script {
						if ("${COMPARATOR_ERRORS_SUBJECT}" != '' && "$BUILD_TYPE" == "I") {
							echo 'Skip adding unstable build to composite repository.'
							return
						}
						build job: 'Releng/modifyP2CompositeRepository', wait: true, propagate: true, parameters: [
							string(name: 'repositoryPath', value: "eclipse/updates/${RELEASE_VER}-${BUILD_TYPE}-builds"),
							string(name: 'add', value: "${BUILD_IID}"),
							string(name: 'sizeLimit', value: '3')
						]
					}
				}
			}
		}
		stage('Trigger tests') {
			steps {
				script {
					for (c in BUILD.tests) {
						build job: "${BUILD.testJobFolder}/${TEST_NAME_PREFIX}-${c.os}-${c.arch}-java${c.javaVersion}", wait: false, parameters: [
							string(name: 'buildId', value: "${BUILD_IID}")
						]
					}
				}
				build job: 'AutomatedTests/smokeTests', wait: false, parameters: [
					string(name: 'buildId', value: "${BUILD_IID}")
				]
			}
		}
		stage('Trigger publication to Maven snapshots repo') {
			when {
				allOf {
					environment name: 'BUILD_TYPE', value: 'I'
					environment name: 'COMPARATOR_ERRORS_SUBJECT', value: ''
				// On comparator-erros, skip the deployment of snapshot version to the 'eclipse-snapshots' maven repository to prevent that ECJ snapshot
				// from being used in verification builds. Similar to how the p2-repository is not added to the I-build composite in that case.
				}
			}
			steps {
				build job: 'Releng/deployToMaven', wait: false, parameters: [
					string(name: 'sourceRepository', value: "https://download.eclipse.org/eclipse/updates/${RELEASE_VER}-${BUILD_TYPE}-builds/${BUILD_IID}")
				]
			}
		}
	}
	post {
		always {
			archiveArtifacts artifacts: 'cje-production/siteDir/**', excludes: 'cje-production/siteDir/eclipse/updates/**'
		}
		failure {
			emailext subject: "${RELEASE_VER} ${BUILD_TYPE}-Build: ${BUILD_IID} - BUILD FAILED",
				body: "Please go to ${BUILD_URL}console and check the build failure.", mimeType: 'text/plain',
				to: "${BUILD.mailingList}", from:'genie.releng@eclipse.org'
		}
		success {
			emailext subject: "${RELEASE_VER} ${BUILD_TYPE}-Build: ${BUILD_IID} ${COMPARATOR_ERRORS_SUBJECT}",
			body: ("""\
			Eclipse downloads:
			https://download.eclipse.org/eclipse/downloads/drops4/${BUILD_IID}
			
			Build logs and/or test results (eventually):
			https://download.eclipse.org/eclipse/downloads/drops4/${BUILD_IID}/testResults.php
			""" + (env.COMPARATOR_ERRORS_SUBJECT == '' ? '' : """
			Check unanticipated comparator messages:
			https://download.eclipse.org/eclipse/downloads/drops4/${BUILD_IID}/buildlogs/comparatorlogs/buildtimeComparatorUnanticipated.log.txt
			""") + """
			Software site repository:
			https://download.eclipse.org/eclipse/updates/${RELEASE_VER}-${BUILD_TYPE}-builds
			
			Specific (simple) site repository:
			https://download.eclipse.org/eclipse/updates/${RELEASE_VER}-${BUILD_TYPE}-builds/${BUILD_IID}
			
			Equinox downloads:
			https://download.eclipse.org/equinox/drops/${BUILD_IID}
			""").stripIndent(), mimeType: 'text/plain',
			to: "${BUILD.mailingList}", from:'genie.releng@eclipse.org'
		}
	}
}

@NonCPS
def assignEnvVariable(String name, String value) {
	env[name] = value
	println("${name}=${value}")
}

def readBuildProperties(String buildPropertiesFile){
	return readProperties(file: buildPropertiesFile, charset: 'UTF-8').collectEntries{n, v ->
			v = v.trim();
			return [n, (v.startsWith('"') && v.endsWith('"') ? v.substring(1, v.length() - 1) : v)]
		}
}
