
pipeline {
	options {
		timeout(time: 300, unit: 'MINUTES')
		timestamps()
		buildDiscarder(logRotator(numToKeepStr:'10'))
	}
	agent none
	stages {
		stage('Trigger tests'){
			matrix {
				axes {
					axis {
						name 'MACHINE'
						values \
						'opensuse_leap', \
						'linux_riscv', \
						'centos9', \
						'centos8_arm', \
						'centos8_ppc'
					}
					axis {
						name 'JAVA_VERSION'
						values '21', '24'
					}
				}
				stages {
					stage('Create test setup') {
						steps{
							script {
								def agentId = env.MACHINE
								def os, arch, executorAgent;
								if (agentId == 'opensuse_leap') {
									os = 'linux'; arch = 'x86_64'
									executorAgent = createKubernetesAgent('eclipse/platformreleng-opensuse-gtk3-metacity:15')
								} else if (agentId == 'linux_riscv') {
									os = 'linux'; arch = 'riscv64'
									executorAgent = createLabeledAgent('riscv64')
								} else if (agentId == 'centos9') {
									os = 'linux'; arch = 'x86_64'
									executorAgent = createKubernetesAgent('eclipse/platformreleng-centos-gtk4-mutter:9')
								} else if (agentId == 'centos8_arm') {
									os = 'linux'; arch = 'aarch64'
									executorAgent = createLabeledAgent('arm64')
								} else if (agentId == 'centos8_ppc') {
									os = 'linux'; arch = 'ppc64le'
									executorAgent = createLabeledAgent('ppctest')
								}
								runSmokeTest(executorAgent, agentId, os, arch, env.JAVA_VERSION)
							}
						}
					}
				}
			}
		}
	}
	post {
        unsuccessful {
            emailext subject: "Smoke test for ${buildId} - ${currentBuild.currentResult}", 
            body: "Smoke Tests failed. Please go to ${BUILD_URL} and check the build failure",
            to: "sravankumarl@in.ibm.com sravan.lakkimsetti@gmail.com rahul.mohanan@ibm.com",
            from:"genie.releng@eclipse.org"
        }
        success {
            emailext subject: "Smoke test for ${buildId} - SUCCESS",
            body: "Smoke Tests successful: ${BUILD_URL}",
            to: "sravankumarl@in.ibm.com sravan.lakkimsetti@gmail.com rahul.mohanan@ibm.com",
            from:"genie.releng@eclipse.org"
        }
	}
}

def runSmokeTest(Closure executorAgent, String agentId, String os, String arch, String javaVersion) {
	executorAgent.call({
		cleanWs()
		def javaHome = installJDK(javaVersion, os, arch)
		def antHome = tool(type:'ant', name:'apache-ant-latest')
		try {
		dir ("${WORKSPACE}/${agentId}-java${javaVersion}") { // run in a unique directory to allow distinction of archived build artifacts
			withEnv([
				"JAVA_HOME=${javaHome}", "ANT_HOME=${ antHome }",
				"WORKSPACE=${pwd()}", "PATH=${javaHome}/bin:${antHome}/bin:${PATH}",
				"ANT_OPTS=-Djava.io.tmpdir=${pwd()}/tmp"
			]) {
				xvnc(useXauthority: true) {
					if (os =='linux') {
						def ws = 'gtk'
						sh '''#!/bin/bash -x
							buildId=$(echo $buildId|tr -d ' ')
							cat /etc/*release
							echo "whoami:  $(whoami)"
							echo "uname -a: $(uname -a)"
							
							# 0002 is often the default for shell users, but it is not when ran from
							# a cron job, so we set it explicitly, to be sure of value, so releng group has write access to anything
							# we create on shared area.
							oldumask=$(umask)
							umask 0002
							echo "umask explicitly set to 0002, old value was $oldumask"
							
							# we want java.io.tmpdir to be in $WORKSPACE, but must already exist, for Java to use it.
							mkdir -p tmp
							
							curl -o getEBuilder.xml https://download.eclipse.org/eclipse/relengScripts/testScripts/bootstrap/getEBuilder.xml
							
							echo JAVA_HOME: $JAVA_HOME
							echo ANT_HOME: $ANT_HOME
							echo PATH: $PATH
							
							env 1>envVars.txt 2>&1
							ant -diagnostics 1>antDiagnostics.txt 2>&1
							java -XshowSettings -version 1>javaSettings.txt 2>&1
							
							ant -f getEBuilder.xml -DbuildId=${buildId} \
							  -Dosgi.os=''' + os + ''' -Dosgi.ws=''' + ws + ''' -Dosgi.arch=''' + arch + ''' \
							  -DtestSuite=${testsToRun}
						'''
					} else{
						error('Not yet implemented OS: ' + os)
					}
				}
			}
		}
		junit keepLongStdio: true, testResults: '**/eclipse-testing/results/xml/*.xml'
		} finally {
			archiveArtifacts allowEmptyArchive: true, artifacts: '**/eclipse-testing/results/**, **/eclipse-testing/directorLogs/**, */*.properties, */*.txt'
			cleanWs()
		}
	})
}

def createKubernetesAgent(String imageName){
	return { body ->
		podTemplate(inheritFrom: 'basic' /* inherit general configuration */, containers: [
			containerTemplate(name: 'custom', image: imageName,
				resourceRequestCpu:'1000m', resourceRequestMemory:'512Mi',
				resourceLimitCpu:'1000m', resourceLimitMemory:'2048Mi',
				alwaysPullImage: true, command: 'cat', ttyEnabled: true)
		]) {
			node(POD_LABEL) { stage('Run tests') { container('custom') { body() } } }
		}
	}
}

def createLabeledAgent(String agentLabel){
	return { body -> node(agentLabel) { stage('Run tests') { body() } } }
}

def installJDK(String version, String os, String arch, String releaseType='ga') {
	// Translate os/arch names that are different in the Adoptium API
	if (os == 'win32') {
		os == 'windows'
	} else if (os == 'macosx') {
		os == 'mac'
	}
	if (arch == 'x86_64') {
		arch == 'x64'
	}
	dir ("${WORKSPACE}/java") {
		sh "curl -L https://api.adoptium.net/v3/binary/latest/${version}/${releaseType}/${os}/${arch}/jdk/hotspot/normal/eclipse | tar -xzf -"
		return "${pwd()}/" + sh(script: 'ls', returnStdout: true).strip()
	}
}
