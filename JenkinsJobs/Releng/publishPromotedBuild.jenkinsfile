pipeline {
	options {
		skipDefaultCheckout()
		timestamps()
		timeout(time: 45, unit: 'MINUTES')
		buildDiscarder(logRotator(numToKeepStr:'10'))
	}
	agent {
		label 'basic'
	}
	tools {
		jdk 'temurin-jdk21-latest'
		maven 'apache-maven-latest'
	}
	stages {
		stage('Process Input') {
			steps {
				script {
					if (!params.releaseBuildID) {
						error "Required parameter 'releaseBuildID' is not defined."
					}
					assignEnvVariable('RELEASE_BUILD_ID', params.releaseBuildID.trim())
					def idMatcher = env.RELEASE_BUILD_ID =~ /(?<type>[SR])-(?<major>\d+)\.(?<minor>\d+)(\.\d+)?(?<checkpoint>(M|RC)\d+[a-z]?)?-(?<date>\d{8})(?<time>\d{4})/
					if (!idMatcher.matches()) {
						error "releaseID: ${RELEASE_BUILD_ID}, does not match the expected pattern."
					}
					assignEnvVariable('RELEASE_TYPE', idMatcher.group('type'))
					assignEnvVariable('RELEASE_VERSION_MAJOR', idMatcher.group('major'))
					assignEnvVariable('RELEASE_VERSION_MINOR', idMatcher.group('minor'))
					assignEnvVariable('CHECKPOINT', idMatcher.group('checkpoint') ?: 'GA')
					def buildId = "I${idMatcher.group('date')}-${idMatcher.group('time')}"
					idMatcher = null // release matcher as it's not serializable
					
					if (env.RELEASE_TYPE == 'R') {
						assignEnvVariable('REPOSITORY_PATH', "${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR}/${RELEASE_BUILD_ID}")
					} else if (env.RELEASE_TYPE == 'S') {
						assignEnvVariable('REPOSITORY_PATH', "${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR}-I-builds/${buildId}")
					} else {
						error "RELEASE_TYPE, ${RELEASE_TYPE}, did not match any expected pattern."
					}
					
					sh """
							git clone --depth=1 --filter=tree:0 --no-checkout --branch=${buildId} https://github.com/eclipse-platform/eclipse.platform.releng.aggregator.git
							cd eclipse.platform.releng.aggregator
							git sparse-checkout set --no-cone eclipse-platform-parent/pom.xml
							git checkout
					"""
					def eclipseParentPOM = readFile('eclipse.platform.releng.aggregator/eclipse-platform-parent/pom.xml')
					def yearMatcher = eclipseParentPOM =~ /<releaseYear>(?<year>\d+)<\/releaseYear>/
					def monthMatcher = eclipseParentPOM =~ /<releaseMonth>(?<month>\d+)<\/releaseMonth>/
					if (!yearMatcher.find() || !monthMatcher.find()) {
						error "Eclipse Parent POM does not contain releaseYear or releaseMonth"
					}
					assignEnvVariable('TRAIN_NAME', yearMatcher.group('year') + '-' + monthMatcher.group('month'))
					if (!env.TRAIN_NAME) {
						error "TRAIN_NAME is empty."
					}
				}
			}
		}
		stage('Make Download Page visible') {
			steps {
				sshagent(['projects-storage.eclipse.org-bot-ssh']) {
					sh '''#!/bin/bash -xe
						# Build machine locations (would very seldom change)
						DOWNLOAD_ROOT=${DOWNLOAD_ROOT:-/home/data/httpd/download.eclipse.org}
						ARCHIVE_ROOT=${ARCHIVE_ROOT:-/home/data/httpd/archive.eclipse.org} 
						ROOT_LOCATIONS=("${DOWNLOAD_ROOT}")
						if [[ "${RELEASE_TYPE}" == 'R' ]]; then
							ROOT_LOCATIONS+=("${ARCHIVE_ROOT}")
						fi
						MARKER_FILES=("eclipse/downloads/drops4/${RELEASE_BUILD_ID}/buildHidden" "equinox/drops/${RELEASE_BUILD_ID}/buildHidden")
						
						for rootLocation in "${ROOT_LOCATIONS[@]}"; do
							for markerFile in "${MARKER_FILES[@]}"; do
								ssh genie.releng@projects-storage.eclipse.org rm --force "${rootLocation}/${markerFile}"
							done
						done
					'''
				}
				build job: 'Releng/updateIndex', wait: false
			}
		}
		stage('Make Release Repository visible') {
			when {
				environment name: 'RELEASE_TYPE', value: 'R'
			}
			steps {
				build job: 'Releng/modifyP2CompositeRepository', wait: true, propagate: true, parameters: [
					string(name: 'repositoryPath', value: "eclipse/updates/${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR}"),
					string(name: 'add', value: "${RELEASE_BUILD_ID}")
				]
				// Update generic composite repositories for latest release (clearing all previous children)
				// Note: The stream number is not in the 'name', because once a 'name' is defined in Eclipse's UI, it does not change.
				build job: 'Releng/modifyP2CompositeRepository', wait: true, propagate: true, parameters: [
					string(name: 'repositoryPath', value: "eclipse/updates/latest"),
					string(name: 'repositoryName', value: "Eclipse latest release"),
					string(name: 'sizeLimit', value: '1'), // Clear all previous children
					string(name: 'add', value: "https://download.eclipse.org/eclipse/updates/${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR}/"),
				]
			}
		}
		stage('Send announcement mail') {
			steps {
				emailext subject: "Eclipse and Equinox ${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR} (${TRAIN_NAME}) ${CHECKPOINT} is available",
					body: ("""\
					Hello everyone,
					
					We are pleased to announce that Eclipse and Equinox ${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR} ${CHECKPOINT} (for ${TRAIN_NAME}) is available for download and updates.
					
						Eclipse downloads:
						https://download.eclipse.org/eclipse/downloads/drops4/${RELEASE_BUILD_ID}/
						
						New and Noteworthy:
						https://www.eclipse.org/eclipse/news/${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR}/
						
						Update existing ${ RELEASE_TYPE != 'R' ? '(non-production) ' : ''}installations:
						https://download.eclipse.org/eclipse/updates/${REPOSITORY_PATH.substring(0, REPOSITORY_PATH.lastIndexOf('/'))}/
						
						Specific repository good for building against:
						https://download.eclipse.org/eclipse/updates/${REPOSITORY_PATH}/
						
						Equinox specific downloads:
						https://download.eclipse.org/equinox/drops/${RELEASE_BUILD_ID}/
					
					Thank you to everyone who made this checkpoint possible.
					
					Best regards,
					
					The Eclipse contributors
					""").stripIndent(), mimeType: 'text/plain', from:'genie.releng@eclipse.org',
					to: "platform-releng-dev@eclipse.org eclipse-dev@eclipse.org platform-dev@eclipse.org equinox-dev@eclipse.org jdt-dev@eclipse.org pde-dev@eclipse.org"
			}
		}
	}
}

@NonCPS
def assignEnvVariable(String name, String value) {
	env."${name}" = value
	println("${name}=${value}")
}
