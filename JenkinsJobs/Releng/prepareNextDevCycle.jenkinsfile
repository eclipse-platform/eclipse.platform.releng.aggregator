
pipeline {
	options {
		timestamps()
		timeout(time: 60, unit: 'MINUTES')
		buildDiscarder(logRotator(numToKeepStr:'5'))
		skipDefaultCheckout()
	}
	agent {
		label 'ubuntu-2404'
	}
	tools {
		jdk 'temurin-jdk21-latest'
		maven 'apache-maven-latest'
	}
	//Parameters are defined in the job definition
	stages {
		stage('Process Input') {
			steps {
				script {
					def nextVersionMatcher = params.NEXT_RELEASE_VERSION =~ /(?<major>\d+)\.(?<minor>\d+)/
					if (!nextVersionMatcher.matches()) {
						error "Unexpected format for NEXT_RELEASE_VERSION: ${params.NEXT_RELEASE_VERSION}"
					}
					env.NEXT_RELEASE_VERSION_MAJOR = nextVersionMatcher.group('major')
					env.NEXT_RELEASE_VERSION_MINOR = nextVersionMatcher.group('minor')
					nextVersionMatcher = null // release matcher as it's not serializable
					
					def previousVersionMatcher = params.PREVIOUS_RELEASE_CANDIDATE_ID =~ /(S|R)-(?<major>\d+)\.(?<minor>\d+)(?<kind>M1|M2|M3|RC1|RC2)?-(?<timestamp>\d{12})/
					if (!previousVersionMatcher.matches()) {
						error "Unexpected format for PREVIOUS_RELEASE_CANDIDATE_ID: ${params.PREVIOUS_RELEASE_CANDIDATE_ID}"
					}
					env.PREVIOUS_RELEASE_VERSION_MAJOR = previousVersionMatcher.group('major')
					env.PREVIOUS_RELEASE_VERSION_MINOR = previousVersionMatcher.group('minor')
					env.PREVIOUS_RELEASE_VERSION = "${PREVIOUS_RELEASE_VERSION_MAJOR}.${PREVIOUS_RELEASE_VERSION_MINOR}"
					env.PREVIOUS_RELEASE_CANDIDATE_TAG = "${PREVIOUS_RELEASE_VERSION}" + previousVersionMatcher.group('kind')
					def previousReleaseTimestamp = previousVersionMatcher.group('timestamp')
					env.PREVIOUS_RELEASE_CANDIDATE_I_BUILD = "I${previousReleaseTimestamp.substring(0,8)}-${previousReleaseTimestamp.substring(8,12)}"
					previousVersionMatcher = null // release matcher as it's not serializable
					
					//TODO: Read the dates from the calender instead of provide a structured document somewhere?
					// E.g. next to: https://github.com/eclipse-simrel/.github/blob/main/wiki/SimRel/2025-09.md
					def m1Date = parseDate(params.M1_DATE)
					def m2Date = parseDate(params.M2_DATE)
					def m3Date = parseDate(params.M3_DATE)
					def rc1Date = parseDate(params.RC1_DATE)
					def rc2Date = parseDate(params.RC2_DATE)
					def gaDate = parseDate(params.GA_DATE)
					if (!(m1Date < m2Date && m2Date < m3Date && m3Date < rc1Date && rc1Date < rc2Date && rc1Date < gaDate)) {
						error "Dates are not in strictly ascending order: ${params.M1_DATE}, ${params.M2_DATE}, ${params.M3_DATE}, ${params.RC1_DATE}, ${params.RC2_DATE}, ${params.GA_DATE}"
					}
					env.NEXT_RELEASE_YEAR = gaDate.year
					env.NEXT_RELEASE_MONTH = String.format("%02d", gaDate.monthValue)
					sh '''#!/bin/sh +x
						echo 'Input parameters read successfully'
						echo "DRY_RUN='$DRY_RUN'"
						echo ''
						echo "NEXT_RELEASE_VERSION='$NEXT_RELEASE_VERSION'"
						echo "NEXT_RELEASE_VERSION_MAJOR='$NEXT_RELEASE_VERSION_MAJOR'"
						echo "NEXT_RELEASE_VERSION_MINOR='$NEXT_RELEASE_VERSION_MINOR'"
						echo ''
						echo "PREVIOUS_RELEASE_CANDIDATE_ID='$PREVIOUS_RELEASE_CANDIDATE_ID'"
						echo "PREVIOUS_RELEASE_VERSION='$PREVIOUS_RELEASE_VERSION'"
						echo "PREVIOUS_RELEASE_VERSION_MAJOR='$PREVIOUS_RELEASE_VERSION_MAJOR'"
						echo "PREVIOUS_RELEASE_VERSION_MINOR='$PREVIOUS_RELEASE_VERSION_MINOR'"
						echo "PREVIOUS_RELEASE_CANDIDATE_TAG='$PREVIOUS_RELEASE_CANDIDATE_TAG'"
						echo "PREVIOUS_RELEASE_CANDIDATE_I_BUILD='$PREVIOUS_RELEASE_CANDIDATE_I_BUILD'"
						echo ''
						echo "M1_DATE='$M1_DATE'"
						echo "M2_DATE='$M2_DATE'"
						echo "M3_DATE='$M3_DATE'"
						echo "RC1_DATE='$RC1_DATE'"
						echo "RC2_DATE='$RC2_DATE'"
						echo "GA_DATE='$GA_DATE'"
						echo "NEXT_RELEASE_YEAR='$NEXT_RELEASE_YEAR'"
						echo "NEXT_RELEASE_MONTH='$NEXT_RELEASE_MONTH'"
					'''
				}
			}
		}
		stage('Checkout SCM') {
			steps {
				checkout scm
				sh '''
					git submodule update --init --recursive
					git config --global user.email 'releng-bot@eclipse.org'
					git config --global user.name 'Eclipse Releng Bot'
				'''
			}
		}
		/*TODO: Test:
			- If deploying the parent POM works
			- If pushing works to aggr and submodules (e.g. pde)
			- if creation of milestones works in aggr-repo and submodules (e.g. PDE)
			- if PR createion works in aggr-repo and submodules (e.g. PDE)
		*/
		stage('Update Maven Version') {
			environment {
				MAVEN_ARGS = '-U -B -ntp'
			}
			steps {
				sh '''
					mvn org.eclipse.tycho:tycho-versions-plugin:set-version \
						-DnewVersion=${NEXT_RELEASE_VERSION}.0-SNAPSHOT
					mvn -f eclipse-platform-parent/pom.xml --non-recursive org.eclipse.tycho:tycho-versions-plugin:set-property \
						-Dproperties=releaseVersion,releaseYear,releaseMonth \
						-DnewReleaseVersion=${NEXT_RELEASE_VERSION} \
						-DnewReleaseYear=${NEXT_RELEASE_YEAR} \
						-DnewReleaseMonth=${NEXT_RELEASE_MONTH}
					
					git commit --all --message "Prepare Release ${NEXT_RELEASE_VERSION}"
					git submodule foreach 'git commit --all --message "Update release version for ${NEXT_RELEASE_VERSION}" & echo done'
				'''
			}
		}
		stage('Update build scripts') {
			steps {
				replaceInFile('cje-production/buildproperties.txt', [
					"RELEASE_VER=\"${PREVIOUS_RELEASE_VERSION}\"" : "RELEASE_VER=\"${NEXT_RELEASE_VERSION}\"",
					"STREAM=\"${PREVIOUS_RELEASE_VERSION}.0\"" : "STREAM=\"${NEXT_RELEASE_VERSION}.0\"",
					"STREAMMajor=\"${PREVIOUS_RELEASE_VERSION_MAJOR}\"" : "STREAMMajor=\"${NEXT_RELEASE_VERSION_MAJOR}\"",
					"STREAMMinor=\"${PREVIOUS_RELEASE_VERSION_MINOR}\"" : "STREAMMinor=\"${NEXT_RELEASE_VERSION_MINOR}\"",
				])
				replaceInFile('eclipse.platform.releng.tychoeclipsebuilder/eclipse.platform.repository/platform.p2.inf', [
					"${PREVIOUS_RELEASE_VERSION} Release" : "${NEXT_RELEASE_VERSION} Release",
				])
				replaceInFile('eclipse.platform.releng.tychoeclipsebuilder/eclipse.platform.repository/sdk.p2.inf', [
					"${PREVIOUS_RELEASE_VERSION} Release" : "${NEXT_RELEASE_VERSION} Release",
				])
				replaceInFile('production/testScripts/configuration/streamSpecific.properties', [
					"for ${PREVIOUS_RELEASE_VERSION}.0 builds" : "for ${NEXT_RELEASE_VERSION}.0 builds",
				])
				replaceAllInFile('scripts/updateProductVersion.sh', [
					's/\\d+.\\d+.0/\\d+.\\d+.0/g' : "g|s/${PREVIOUS_RELEASE_VERSION}.0/${NEXT_RELEASE_VERSION}.0/g",
				])
				
				commitAllChangesExcludingSubmodules("Update versions to ${NEXT_RELEASE_VERSION} in build scripts")
			}
		}
		stage('Move previous version to current RC') {
			steps {
				sh '''
					mvn -f eclipse-platform-parent/pom.xml --non-recursive org.eclipse.tycho:tycho-versions-plugin:set-property \
						-Dproperties=previous-release.baseline \
						"-DnewPrevious-release.baseline=https://download.eclipse.org/eclipse/updates/${PREVIOUS_RELEASE_VERSION}-I-builds/${PREVIOUS_RELEASE_CANDIDATE_I_BUILD}/"
				'''
				replaceAllInFile('cje-production/buildproperties.txt', [
					'PREVIOUS_RELEASE_VER=".*"' : "PREVIOUS_RELEASE_VER=\"${PREVIOUS_RELEASE_CANDIDATE_TAG}\"",
					'PREVIOUS_RELEASE_REPO_ID=".*"' : "PREVIOUS_RELEASE_REPO_ID=\"${PREVIOUS_RELEASE_VERSION}-I-builds\"",
					'BASEBUILD_ID=".*"' : "BASEBUILD_ID=\"${PREVIOUS_RELEASE_CANDIDATE_I_BUILD}\"",
					'PREVIOUS_RELEASE_ID=".*"' : "PREVIOUS_RELEASE_ID=\"${PREVIOUS_RELEASE_CANDIDATE_ID}\"",
				])
				replaceAllInFile('eclipse.platform.releng.tychoeclipsebuilder/eclipse-junit-tests/src/main/resources/equinoxp2tests.properties', [
					'eclipse-platform-\\d+.\\d+-' : "eclipse-platform-${PREVIOUS_RELEASE_CANDIDATE_TAG}-",
					'org.eclipse.equinox.p2.tests.last.release.build.repo=.*' : "org.eclipse.equinox.p2.tests.last.release.build.repo=https://download.eclipse.org/equinox/drops/${PREVIOUS_RELEASE_CANDIDATE_ID}/",
				])
				replaceAllInFile('eclipse.platform.releng.tychoeclipsebuilder/eclipse-junit-tests/src/main/resources/label.properties', [
					'previousReleaseVersion=.*' : "previousReleaseVersion=${PREVIOUS_RELEASE_CANDIDATE_TAG}",
				])
				replaceAllInFile('production/testScripts/configuration/streamSpecific.properties', [
					'previousReleaseLocation=.*' : 'previousReleaseLocation=https://\\${DOWNLOAD_HOST}/eclipse/downloads/drops4/' + PREVIOUS_RELEASE_CANDIDATE_ID + '/',
					'previousReleaseVersion=.*' : "previousReleaseVersion=${PREVIOUS_RELEASE_CANDIDATE_TAG}",
					'previousReleaseVersionRepo=.*' : "previousReleaseVersionRepo=${PREVIOUS_RELEASE_VERSION}-I-builds",
				])
				commitAllChangesExcludingSubmodules("Move previous version to ${PREVIOUS_RELEASE_CANDIDATE_TAG} in build scripts")
			}
		}
		stage('Deploy parent-pom and SDK-target') {
			// Deploy new parent first to ensure it's available when PRs for submodule updates are created.
			environment {
				GOAL ="${ params.DRY_RUN ? 'install' : 'deploy' }"
			}
			steps {
				sh '''
					mvn clean ${GOAL} -f eclipse-platform-parent/pom.xml
					mvn clean ${GOAL} -f eclipse.platform.releng.prereqs.sdk/pom.xml
				'''
			}
		}
		stage('Push preparation branches') {
			steps {
				sshagent (['github-bot-ssh']) {
					sh '''
						function pushNewCommitsToPreparationBranch() {
							pushURL=$(git config remote.origin.url)
							# Switch to SSH, if the configured URL uses HTTPS (we can only push with SSH)
							if [[ "$pushURL" == http* ]]; then
								pushURL=$(echo $pushURL|sed --expression 's|https://github.com/|git@github.com:|')
							fi
							if [[ ${DRY_RUN} == 'true' ]]; then
								dryRunFlag='--dry-run'
							fi
							git push ${dryRunFlag} ${pushURL} HEAD:refs/heads/prepare_R${NEXT_RELEASE_VERSION}
						}
						pushNewCommitsToPreparationBranch
						export -f pushNewCommitsToPreparationBranch
						git submodule foreach 'pushNewCommitsToPreparationBranch'
					'''
				}
			}
		}
		stage('Create preparation Pull-Requests') {
			environment {
				GITHUB_BOT_TOKEN = credentials('github-bot-token')
			}
			steps {
				script {
					def prHeadline = "Prepare ${NEXT_RELEASE_VERSION} development"
					def prBranch = "prepare_R${NEXT_RELEASE_VERSION}"
					def aggregatorPreparationPR = createPullRequest('eclipse-platform/eclipse.platform.releng.aggregator', prHeadline, """\
						Prepare development of Eclipse ${NEXT_RELEASE_VERSION}.
						This includes:
						- Updating the version of the Maven parent, all references to it and the Eclipse products to `${NEXT_RELEASE_VERSION}`
						- Updating the release version to `${NEXT_RELEASE_VERSION}` across build scripts
						- Updating the previous release version to the current Release-Candidate: `${PREVIOUS_RELEASE_CANDIDATE_ID}`
						""".stripIndent(), prBranch)
						
					def submoduleURLs = sh(script: "git submodule foreach --quiet 'git config remote.origin.url'", returnStdout: true).trim().split('\\s')
					for (submoduleURL in submoduleURLs) {
						// Extract repository path from e.g.: https://github.com/eclipse-platform/eclipse.platform.git
						def expectedPrefix = 'https://github.com/'
						def expectedSuffix = '.git'
						if (!submoduleURL.startsWith(expectedPrefix) || !submoduleURL.endsWith(expectedSuffix)) {
							error "Unexpected of submodule URL: ${submoduleURL}"
						}
						def repoName = submoduleURL.substring(expectedPrefix.length(), submoduleURL.length() - expectedSuffix.length())
						createPullRequest(repoName, prHeadline, """\
							Prepare development of Eclipse ${NEXT_RELEASE_VERSION}.
							This complements:
							- ${aggregatorPreparationPR}
							""".stripIndent(), prBranch)
					}
				}
			}
		}
		stage('Create Github milestones') {
			environment {
				GITHUB_BOT_TOKEN = credentials('github-bot-token')
			}
			steps {
				script {
					def organisations = [ 'eclipse-platform', 'eclipse-jdt', 'eclipse-pde', 'eclipse-equinox' ]
					for (organisation in organisations) {
						def repositories = listReposOfOrganization(organisation)
						echo "${organisation} repositories: ${repositories}"
						for (repository in repositories) {
							createMilestone(organisation, repository, "${NEXT_RELEASE_VERSION} M1",  "${NEXT_RELEASE_VERSION} Milestone 1",         "${M1_DATE}")
							createMilestone(organisation, repository, "${NEXT_RELEASE_VERSION} M2",  "${NEXT_RELEASE_VERSION} Milestone 2",         "${M2_DATE}")
							createMilestone(organisation, repository, "${NEXT_RELEASE_VERSION} M3",  "${NEXT_RELEASE_VERSION} Milestone 3",         "${M3_DATE}")
							createMilestone(organisation, repository, "${NEXT_RELEASE_VERSION} RC1", "${NEXT_RELEASE_VERSION} Release Candidate 1", "${RC1_DATE}")
							createMilestone(organisation, repository, "${NEXT_RELEASE_VERSION} RC2", "${NEXT_RELEASE_VERSION} Release Candidate 2", "${RC2_DATE}")
							createMilestone(organisation, repository, "${NEXT_RELEASE_VERSION}",     "${NEXT_RELEASE_VERSION} Release",             "${GA_DATE}")
						}
					}
				}
			}
		}
	}
}

@NonCPS
def parseDate(String dateString) {
	return java.time.LocalDate.parse(dateString.trim()) // expects format 'yyyy-MM-dd'
}

def replaceInFile(String filePath, Map<String,String> replacements) {
	replaceAllInFile(filePath, replacements.collectEntries{ k, v -> [java.util.regex.Pattern.quote(k), v] });
}

def replaceAllInFile(String filePath, Map<String,String> replacements) {
	def content = readFile(filePath)
	for (entry in replacements) {
		content = content.replaceAll(entry.key, entry.value)
	}
	writeFile(file:filePath, text: content)
}

def commitAllChangesExcludingSubmodules(String commitMessage) {
	withEnv(["COMMIT_MESSAGE=${commitMessage}"]) {
		sh '''
			#Commit all changes, except for the updated sub-modules here
			git add --all
			git restore --staged $(git submodule foreach --quiet 'echo $sm_path')
			git commit --message "${COMMIT_MESSAGE}"
		'''
	}
}

def listReposOfOrganization(String orga) {
	def response = queryGithubAPI('', "orgs/${orga}/repos", null)
	if (!(response instanceof List) && (response.errors || (response.status && response.status != 201))) {
		error "Response contains errors:\n${response}"
	}
	return response.name
}

/**
 * Create a new milestone.
 * @param msDueDay the milestone's due-date, format: YYYY-MM-DD
 */
def createMilestone(String orga, String repo, String msTitle, String msDescription, String msDueDay) {
	echo "In ${orga}/${repo} create milestone: ${msTitle} due on ${msDueDay}"
	def params = [title: msTitle, description: msDescription, due_on: "${msDueDay}T23:59:59Z"]
	def response = queryGithubAPI('-X POST', "repos/${orga}/${repo}/milestones", params)
	if (response?.errors || (response?.status && response.status != 201)) {
		if (response.errors && response.errors[0]?.code == 'already_exists') {
			echo 'Milestone already exists and is not modified'
			// TODO: update milestone in this case: https://docs.github.com/en/rest/issues/milestones?apiVersion=2022-11-28#update-a-milestone
			// Usefull if e.g. the dates are wrongly read from the calendar
		} else {
			error "Response contains errors:\n${response}"
		}
	} else {
		echo 'Created successfully'
	}
}

/**
 * Create a PR in the specified repo, from a branch that is expected to reside in the same repository.
 */
def createPullRequest(String orgaSlashRepo, String prTitle, String prBody, String headBranch, String baseBranch = 'master') {
	echo "In ${orgaSlashRepo} create PR: '${prTitle}' on branch ${headBranch}"
	def params = [title: prTitle, body: prBody, head: headBranch, base: baseBranch]
	def response = queryGithubAPI('-X POST',"repos/${orgaSlashRepo}/pulls", params)
	if (response?.errors || (response?.status && response.status != 201)) {
		error "Response contains errors:\n${response}"
	}
	return response?.html_url
}

def queryGithubAPI(String method, String endpoint, Map<String, String> queryParameters) {
	def query = """\
		curl -L ${method} \
			-H "Accept: application/vnd.github+json" \
			-H "Authorization: Bearer \${GITHUB_BOT_TOKEN}" \
			-H "X-GitHub-Api-Version: 2022-11-28" \
			https://api.github.com/${endpoint} \
		""".stripIndent()
	if (queryParameters != null) {
		def params = writeJSON(json: queryParameters, returnText: true)
		query += "-d '" + params + "'"
	}
	if (params.DRY_RUN && !method.isEmpty()) {
		echo "Query (not send): ${query}"
		return null
	}
	def response = sh(script: query, returnStdout: true)
	if (response == null || response.isEmpty()) {
		error 'Response is null or empty. This commonly indicates: HTTP/1.1 500 Internal Server Error'
	}
	return readJSON(text: response)
}
