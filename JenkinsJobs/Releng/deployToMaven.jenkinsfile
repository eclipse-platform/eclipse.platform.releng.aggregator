pipeline {
	options {
		timestamps()
		timeout(time: 120, unit: 'MINUTES')
		buildDiscarder(logRotator(numToKeepStr:'10', artifactNumToKeepStr:'2'))
		checkoutToSubdirectory('git-repo')
	}
	agent {
		label 'basic'
	}
	tools {
		jdk 'temurin-jdk21-latest'
		maven 'apache-maven-latest'
		maven 'maven-daemon'
	}
	environment {
		DEPLOYMENT_TYPE = determineDeploymentType()
		REPO = "${WORKSPACE}/repo"
		CBI_AGGR = "${installLatestCbiAggr()}"
		// Folder ~/.m2 is not writable for builds, ensure mvnd metadata are written within the workspace.
		// prevent jline warning about inability to create a system terminal and increase keep-alive timeouts to increase stability in concurrent usage
		MVND = "mvnd -Dmvnd.daemonStorage=${WORKSPACE}/tools/mvnd -Dorg.jline.terminal.type=dumb -Dmvnd.keepAlive=1000 -Dmvnd.maxLostKeepAlive=600"
	}
	// parameters declared in the definition of the invoking job
	stages {
		stage('Aggregate Maven repository') {
			steps {
				sh '''#!/bin/bash -xe
					FILE_SDK_AGGR="${WORKSPACE}/git-repo/eclipse.platform.releng/deploy-to-maven/SDK4Mvn.aggr"
					
					# Set the specified source repository
					if [ -n "${sourceRepository}" ]; then
						sed -e "s|<repositories location=\\".*\\">|<repositories location=\\"${sourceRepository}\\">|" -i ${FILE_SDK_AGGR}
					fi
					# Set whether this is a snapshot build or not
					if [ "${DEPLOYMENT_TYPE}" != 'release' ]; then
						sed -e 's/snapshot=".*"/snapshot="true"/g' -i ${FILE_SDK_AGGR}
					fi
					
					repoRaw="${WORKSPACE}/repo-raw"
					mkdir ${repoRaw}
					
					echo "Running the aggregator with build model ${FILE_SDK_AGGR} ..."
					"${CBI_AGGR}" aggregate --buildModel ${FILE_SDK_AGGR} \\
					  --action CLEAN_BUILD --buildRoot ${repoRaw} \\
					  -vmargs -Dorg.eclipse.ecf.provider.filetransfer.excludeContributors=org.eclipse.ecf.provider.filetransfer.httpclientjava
					
					mv ${repoRaw}/final ${REPO}
					rm -rf ${repoRaw}
					
					pushd ${REPO}
					
					set +x
					echo "========== Repo aggregation completed ========="
					
					# Find all the artifact folders for all projects
					for project in {platform,jdt,pde}; do
						for pomPath in org/eclipse/${project}/*/*/*.pom; do
							artifactId=$(basename $(dirname $(dirname ${pomPath})))
							version=$(basename $(dirname ${pomPath}))
							groupPath=$(dirname $(dirname $(dirname ${pomPath})))
							groupId=${groupPath//'/'/.}
							# And transform each path to a Maven artifact coordinate groupId:artifactId:version.
							echo "${groupId}:${artifactId}:${version}">>"${WORKSPACE}/coordinates-${project}.txt" # append the GAV
							echo "${pomPath}">>"${WORKSPACE}/artifacts-${project}.txt"  # append the in-repo path
						done
					done
					
					popd
				'''
			}
		}
		stage('Validate repository') {
			// Tests that each to-be deployed artifact can transitively resolve all its dependencies.
			steps {
				dir('repo-validation') { // Do the work in a clean folder without a pom.xml
					sh '''#!/bin/bash -xe
						# Get each artifact and all its transitive dependencies from the Mavenized repository.
						for i in $(cat ${WORKSPACE}/coordinates-*.txt); do
							${MVND} dependency:get --no-transfer-progress -Dosgi.platform=gtk.linux.x86_64 -Dartifact=$i -DremoteRepositories=file://${REPO}
						done
					'''
				}
			}
		}
		stage('Deploy artifacts') {
			matrix {
				axes {
					axis { // environment variable is also used by called scripts!
						name 'PROJECT'
						values 'platform', 'jdt', 'pde'
					}
				}
				stages {
					stage('Deploy project to Maven'){
						environment {
							SETTINGS = "/home/jenkins/.m2/settings-deploy-ossrh-${PROJECT == 'platform' ? 'releng': PROJECT}.xml"
							SONATYPE_BEARER_TOKEN = credentials("central-sonatype-bearer-token-${PROJECT}")
							// The location of the temporarily file that contains the secret file content
							// (see https://www.jenkins.io/doc/book/pipeline/syntax/#supported-credentials-type):
							KEYRING = credentials("secret-subkeys-${PROJECT == 'platform' ? 'releng': PROJECT}.asc")
							MAVEN_GPG_PASSPHRASE = credentials("secret-subkeys-${PROJECT == 'platform' ? 'releng': PROJECT}.asc-passphrase")
						}
						steps {
							dir("deploy-${PROJECT}"){
								sh '''#!/bin/sh -xe
									# Copy configuration pom into clean directory to stop maven from finding the .mvn folder of this git-repository
									cp "${WORKSPACE}/git-repo/eclipse-platform-parent/pom.xml" eclipse-parent-pom.xml
									
									for pomFile in $(cat "${WORKSPACE}/artifacts-${PROJECT}.txt"); do
										set +x
										pomFolder=$(dirname ${pomFile})
										if [ "${DEPLOYMENT_TYPE}" != 'release' ]; then
											URL=https://repo.eclipse.org/content/repositories/eclipse-snapshots/
											REPO_ID=repo.eclipse.org # server-id in the settings.xml, used for authentication
											MAVEN_CENTRAL_URL=https://repo1.maven.org/maven2/${pomFolder%-SNAPSHOT}
											echo "Checking ${MAVEN_CENTRAL_URL}"
											if curl --output /dev/null --silent --head --fail "$MAVEN_CENTRAL_URL"; then
												echo "The released version of file "${pomFile}" is already present at $MAVEN_CENTRAL_URL."
											fi
										else
											URL=file://$(pwd)
											MAVEN_CENTRAL_URL=https://repo1.maven.org/maven2/${pomFolder}
											echo "Checking ${MAVEN_CENTRAL_URL}"
											if curl --output /dev/null --silent --head --fail "$MAVEN_CENTRAL_URL"; then
												echo "Skipping file "${pomFile}" which is already present at $MAVEN_CENTRAL_URL"
												continue;
											fi
										fi
									
										pomFile="${REPO}/${pomFile}"
										file=$(echo "${pomFile}" | sed -e "s|\\(.*\\)\\.pom|\\1.jar|")
										sourcesFile=$(echo "${pomFile}" | sed -e "s|\\(.*\\)\\.pom|\\1-sources.jar|")
										javadocFile=$(echo "${pomFile}" | sed -e "s|\\(.*\\)\\.pom|\\1-javadoc.jar|")
										echo "${file}"
									
										if [ -f "${sourcesFile}" ]; then
											echo "${sourcesFile}"
											SOURCES_ARG="-Dsources=${sourcesFile}"
										else
											SOURCES_ARG=""
											echo "Missing sources file ${sourcesFile}."
										fi
									
										if [ -f "${javadocFile}" ]; then
											echo "${javadocFile}"
											JAVADOC_ARG="-Djavadoc=${javadocFile}"
										else
											JAVADOC_ARG=""
											echo "Missing JavaDoc file ${javadocFile}."
										fi
										set -x
									
										${MVND} -f eclipse-parent-pom.xml -s ${SETTINGS} \\
											gpg:sign-and-deploy-file -DretryFailedDeploymentCount=5 \\
											-Dgpg.signer=bc -Dgpg.keyFilePath=${KEYRING} \\
											-Durl=${URL} -DrepositoryId=${REPO_ID} \\
											-DpomFile=${pomFile} -Dfile=${file} \\
											${SOURCES_ARG} ${JAVADOC_ARG}
									done
								'''
								script {
									if ("${DEPLOYMENT_TYPE}" == 'release') {
										// Documentation of the Central Portal Publisher API 
										// - https://central.sonatype.org/publish/publish-portal-api
										// - https://central.sonatype.com/api-doc
										sh 'zip -r "${PROJECT}-artifacts.zip" "org/eclipse/${PROJECT}"'
										def deploymentId = sh(returnStdout: true, script: '''
											curl --request POST \
												--verbose \
												--header "Authorization: Bearer ${SONATYPE_BEARER_TOKEN}" \
												--header 'accept: text/plain' \
												--header 'Content-Type: multipart/form-data' \
												--form "bundle=@${PROJECT}-artifacts.zip" \
												'https://central.sonatype.com/api/v1/publisher/upload?publishingType=USER_MANAGED'
										''')
										writeFile(file: "${WORKSPACE}/deploymentId-${PROJECT}.txt", text: "${deploymentId}")
										waitUntil(initialRecurrencePeriod: 5_000) {
											// See https://central.sonatype.org/publish/publish-portal-api/#verify-status-of-the-deployment
											def deploymentStatusResponse = sh(returnStdout: true, script: """
												curl --request POST \
													--verbose \
													--header "Authorization: Bearer \${SONATYPE_BEARER_TOKEN}" \
													--header 'accept: application/json' \
													"https://central.sonatype.com/api/v1/publisher/status?id=${deploymentId}"
											""").trim()
											def deploymentStatus = readJSON(text: deploymentStatusResponse, returnPojo: true)
											if (deploymentStatus.deploymentState == 'VALIDATED' && !deploymentStatus.errors) {
												echo "Upload to Maven Central Portal successful:\n${groovy.json.JsonOutput.prettyPrint(deploymentStatusResponse)}"
												return true
											} else if(deploymentStatus.deploymentState == 'PENDING' || deploymentStatus.deploymentState == 'VALIDATING') {
												echo "Upload is being processed: ${deploymentStatus.deploymentState}"
												return false
											} else {
												error "Upload failed or has an unexpected status:\n${groovy.json.JsonOutput.prettyPrint(deploymentStatusResponse)}"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	post {
		always {
			archiveArtifacts allowEmptyArchive: true, artifacts: '\
				repo/**, \
				coordinates*.txt, artifacts*.txt, deploymentId-*.txt'
		}
		failure {
			emailext subject: "Publication of Maven artifacts failed",
				body: "Please go to ${BUILD_URL}console and check the build failure.", mimeType: 'text/plain',
				to: 'platform-releng-dev@eclipse.org', from:'genie.releng@eclipse.org'
		}
	}
}

def determineDeploymentType() {
	if ("${sourceRepository}".trim() =~ /\/(?<version>\d+\.\d+)\/R-\k<version>(\.\d+)?-\d{12}(\/)?$/) {
		input message: 'The specified P2 repository is a release and will be deployed to Maven-Central.', ok : 'Proceed deploying to Maven-Central'
		return 'release'
	} else {
		return 'snapshot'
	}
}

def installLatestCbiAggr(){
	return install('cbiAggr', "https://download.eclipse.org/cbi/updates/p2-aggregator/products/nightly/latest/org.eclipse.cbi.p2repo.cli.product-linux.gtk.x86_64.tar.gz") + '/cbiAggr'
}

def install(String toolType, String url) {
	dir("${WORKSPACE}/tools/${toolType}") {
		sh "curl -L ${url} | tar -xzf -"
		return "${pwd()}/" + sh(script: 'ls', returnStdout: true).trim()
	}
}
