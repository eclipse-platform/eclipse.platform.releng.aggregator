
pipeline {
	options {
		timestamps()
		timeout(time: 120, unit: 'MINUTES')
		buildDiscarder(logRotator(numToKeepStr:'10'))
		checkoutToSubdirectory('git-repo')
	}
	agent {
		label 'basic'
	}
	tools {
		jdk 'temurin-jdk21-latest'
		maven 'apache-maven-latest'
	}
	environment {
		// Filter out all the feature, test, and product IUs that are not published. Escape dots to match them literally
		EXCLUDED_ARTIFACTS = "${'.feature.group$|.feature.jar$|.test|org.eclipse.equinox.executable|org.eclipse.platform.ide|org.eclipse.sdk.ide|_root$'.replace('.', '\\.')}"
		REPO = "${WORKSPACE}/repo"
		PATH = "${installMavenDaemon('1.0.2')}/bin:${PATH}"
		// Folder ~/.m2 is not writable for builds, ensure mvnd metadata are written within the workspace.
		// prevent jline warning about inability to create a system terminal and increase keep-alive timeouts to increase stability in concurrent usage
		MVND = "mvnd -Dmvnd.daemonStorage=${WORKSPACE}/tools/mvnd -Dorg.jline.terminal.type=dumb -Dmvnd.keepAlive=1000 -Dmvnd.maxLostKeepAlive=100"
	}
	// parameters declared in the definition of the invoking job
	stages {
		stage('Aggregate Maven repository') {
			steps {
				sh '''
					SCRIPT='git-repo/eclipse.platform.releng/publish-to-maven-central/CBIaggregator.sh'
					chmod +x ${SCRIPT}
					${SCRIPT} ${snapshotOrRelease}
				'''
				dir("${REPO}") {
					sh '''#!/bin/sh -e
						# Because the pom enhancer modified the poms the checksums are wrong which produces noisy warnings.
						# So regenerate the sha1 for every pom.
						for i in $(find org -name *.pom); do
							echo "Recalculate checksum of $i"
							sha1sum -b < $i | awk '{print $1}' > $i.sha1
						done
					'''
				}
			}
		}
		stage('Validate repository') {
			// It prunes down the set of artifacts to be published, e.g., eliminate test artifacts,
			// and it tests that each to-be-published artifact can transitively resolve all its dependencies.
			steps {
				dir('repo-validation') { // Do the work in a clean folder without a pom.xml
					sh '''#!/bin/bash -e
						workingDir=$(pwd)
						pushd "${REPO}"
						# Find all the version folders for all projects
						projects='org/eclipse/pde org/eclipse/jdt/ org/eclipse/platform/'
						paths=$(find ${projects} -regextype posix-egrep -regex '.*/[0-9]+\\.[0-9]+[^/]*')
						for path in $paths; do
							artifactId=$(basename $(dirname ${path}))
							if [[ $artifactId =~ ${EXCLUDED_ARTIFACTS} ]]; then
								continue # Skip excluded artifact
							fi
							# And transform each path to a Maven artifact coordinate groupId:artifactId:version.
							elements=($(echo $path | tr '/' ' ')) #split by slash
							groupId=$(echo ${elements[@]:0:(${#elements[@]}-2)} | tr ' ' '.') # join first n-2 elements by a dot
							gav="${groupId}:${elements[-2]}:${elements[-1]}" # 'groupId:artifactId:version'
							echo "${gav}">>"${workingDir}/coordinates.txt"
						done
						popd
						
						# Get each artifact and all its transitive dependencies from the Mavenized repository.
						set -x
						for i in $(cat coordinates.txt); do
							${MVND} dependency:get --no-transfer-progress -Dosgi.platform=gtk.linux.x86_64 -Dartifact=$i -DremoteRepositories=file://${REPO}
						done
					'''
				}
			}
		}
		stage('Publish artifacts to Maven-Central') {
			matrix {
				axes {
					axis { // environment variable is also used by called scripts!
						name 'PROJECT'
						values 'platform', 'jdt', 'pde'
					}
				}
				stages {
					stage('Publish project to Maven'){
						environment {
							SETTINGS = "/home/jenkins/.m2/settings-deploy-ossrh-${PROJECT == 'platform' ? 'releng': PROJECT}.xml"
							// The location of the temporarily file that contains the secret file content
							// (see https://www.jenkins.io/doc/book/pipeline/syntax/#supported-credentials-type):
							KEYRING = credentials("secret-subkeys-${PROJECT == 'platform' ? 'releng': PROJECT}.asc")
						}
						steps {
							dir("publish-${PROJECT}"){
								sh '''#!/bin/sh -xe
									gpg --batch --import "${KEYRING}"
									for fpr in $(gpg --list-keys --with-colons  | awk -F: '/fpr:/ {print $10}' | sort -u); do
										echo -e "5\ny\n" |  gpg --batch --command-fd 0 --expert --edit-key ${fpr} trust
									done
									
									# Copy configuration pom into clean directory to stop maven from finding the .mvn folder of this git-repository
									cp "${WORKSPACE}/git-repo/eclipse-platform-parent/pom.xml" eclipse-parent-pom.xml
									
									for pomFile in ${REPO}/org/eclipse/${PROJECT}/*/*/*.pom; do
										set +x
										pomFolder=$(dirname ${pomFile#${REPO}/}) # name of folder, with leading REPO path stripped of
										version=$(basename ${pomFolder})
										artifactId=$(basename $(dirname "${pomFolder}"))
										if [[ $artifactId =~ ${EXCLUDED_ARTIFACTS} ]]; then
											continue # Skip excluded artifact
										fi
										if [[ $version == *-SNAPSHOT ]]; then
											URL=https://repo.eclipse.org/content/repositories/eclipse-snapshots/
											REPO_ID=repo.eclipse.org # server-id in the settings.xml, used for authentication
											MAVEN_CENTRAL_URL=https://repo1.maven.org/maven2/${pomFolder%-SNAPSHOT}
											echo "Checking ${MAVEN_CENTRAL_URL}"
											if curl --output /dev/null --silent --head --fail "$MAVEN_CENTRAL_URL"; then
												echo "The released version of file "${pomFile}" is already present at $MAVEN_CENTRAL_URL."
											fi
										else
											URL=https://oss.sonatype.org/service/local/staging/deploy/maven2/
											REPO_ID=ossrh # server-id in the settings.xml, used for authentication
											MAVEN_CENTRAL_URL=https://repo1.maven.org/maven2/${pomFolder}
											echo "Checking ${MAVEN_CENTRAL_URL}"
											if curl --output /dev/null --silent --head --fail "$MAVEN_CENTRAL_URL"; then
												echo "Skipping file "${pomFile}" which is already present at $MAVEN_CENTRAL_URL"
												continue;
											fi
										fi
									
										file=$(echo "${pomFile}" | sed -e "s|\\(.*\\)\\.pom|\\1.jar|")
										sourcesFile=$(echo "${pomFile}" | sed -e "s|\\(.*\\)\\.pom|\\1-sources.jar|")
										javadocFile=$(echo "${pomFile}" | sed -e "s|\\(.*\\)\\.pom|\\1-javadoc.jar|")
										echo "${file}"
									
										if [ -f "${sourcesFile}" ]; then
											echo "${sourcesFile}"
											SOURCES_ARG="-Dsources=${sourcesFile}"
										else
											SOURCES_ARG=""
											# If the -sources.jar is missing, and the main jar contains .class files, then we won't be able to promote this to Maven central.
											if unzip -l ${file} | grep -q -e '.class$'; then 
												echo "BUILD FAILURE ${file} contains .class files and requires a ${sourcesFile}"
												exit 1
											else
												echo "Missing ${sourcesFile} but ${file} contains no .class files."
											fi; 
										fi
									
										if [ -f "${javadocFile}" ]; then
											echo "${javadocFile}"
											JAVADOC_ARG="-Djavadoc=${javadocFile}"
										else
											JAVADOC_ARG=""
											echo "Missing ${javadocFile}"
										fi
										set -x
									
										${MVND} -f eclipse-parent-pom.xml -s ${SETTINGS} \\
											gpg:sign-and-deploy-file -DretryFailedDeploymentCount=5 \\
											-Durl=${URL} -DrepositoryId=${REPO_ID} \\
											-DpomFile=${pomFile} -Dfile=${file} \\
											${SOURCES_ARG} ${JAVADOC_ARG}
									done
								'''
							}
						}
					}
				}
			}
		}
	}
	post {
		always {
			archiveArtifacts allowEmptyArchive: true, artifacts: '\
				repo/**, \
				repo-validation/coordinates.txt'
		}
		unsuccessful {
			emailext subject: "Publication of Maven artifacts failed",
				body: "Please go to ${BUILD_URL}console and check the build failure.", mimeType: 'text/plain',
				to: 'platform-releng-dev@eclipse.org', from:'genie.releng@eclipse.org'
		}
	}
}

def installMavenDaemon(String version){
	return install('mvnd', "https://downloads.apache.org/maven/mvnd/${version}/maven-mvnd-${version}-linux-amd64.tar.gz")
}

def install(String toolType, String url) {
	dir("${WORKSPACE}/tools/${toolType}") {
		sh "curl -L ${url} | tar -xzf -"
		return "${pwd()}/" + sh(script: 'ls', returnStdout: true).strip()
	}
}
