
pipeline {
	options {
		timestamps()
		timeout(time: 120, unit: 'MINUTES')
		buildDiscarder(logRotator(numToKeepStr:'10'))
		checkoutToSubdirectory('git-repo')
	}
	agent {
		label 'basic'
	}
	tools {
		jdk 'temurin-jdk21-latest'
		maven 'apache-maven-latest'
	}
	environment {
		REPO = "${WORKSPACE}/repo"
	}
	// parameters declared in the definition of the invoking job
	stages {
		stage('Aggregate Maven repository') {
			steps {
				sh '''
					SCRIPT='git-repo/eclipse.platform.releng/publish-to-maven-central/CBIaggregator.sh'
					chmod +x ${SCRIPT}
					${SCRIPT} ${snapshotOrRelease}
				'''
				dir("${REPO}") {
					sh '''#!/bin/sh -e
						# Because the pom enhancer modified the poms the checksums are wrong which produces noisy warnings.
						# So regenerate the sha1 for every pom.
						for i in $(find org -name *.pom); do
							echo "Recalculate checksum of $i"
							sha1sum -b < $i | awk '{print $1}' > $i.sha1
						done
					'''
				}
			}
		}
		stage('Validate repository') {
			// It prunes down the set of artifacts to be published, e.g., eliminate test artifacts,
			// and it tests that each to-be-published artifact can transitively resolve all its dependencies.
			steps {
				dir('repo-validation') { // Do the work in a clean folder without a pom.xml
					sh '''#!/bin/bash -e
						workingDir=$(pwd)
						pushd "${REPO}"
						# Find all the version folders for all projects
						projects='org/eclipse/pde org/eclipse/jdt/ org/eclipse/platform/'
						paths=$(find ${projects} -regextype posix-egrep -regex '.*/[0-9]+\\.[0-9]+[^/]*')
						for path in $paths; do
							if [[ $path =~ \\.feature\\.group|\\.feature\\.jar|\\.executable|\\.test|\\.platform\\.ide|\\.platform\\.sdk|_root|\\.id/|\\.sdk\\.ide/ ]]; then
								# Filter out all the feature, test, and product IUs that are not published.
								continue
							fi
							# And transform each path to a Maven artifact coordinate groupId:artifactId:version.
							elements=($(echo $path | tr '/' ' ')) #split by slash
							groupId=$(echo ${elements[@]:0:(${#elements[@]}-2)} | tr ' ' '.') # join first n-2 elements by a dot
							gav="${groupId}:${elements[-2]}:${elements[-1]}" # 'groupId:artifactId:version'
							echo "${gav}">>"${workingDir}/coordinates.txt"
						done
						popd
						
						# Get each artifact and all its transitive dependencies from the Mavenized repository.
						set -x
						for i in $(cat coordinates.txt); do
							mvn dependency:get --no-transfer-progress -Dosgi.platform=gtk.linux.x86_64 -Dartifact=$i -DremoteRepositories=file://${REPO}
						done
					'''
				}
			}
		}
		stage('Publish artifacts to Maven-Central') {
			matrix {
				axes {
					axis { // environment variable is also used by called scripts!
						name 'PROJECT'
						values 'platform', 'jdt', 'pde'
					}
				}
				stages {
					stage('Publish project to Maven'){
						environment {
							SETTINGS = "/home/jenkins/.m2/settings-deploy-ossrh-${PROJECT == 'platform' ? 'releng': PROJECT}.xml"
							// The location of the temporarily file that contains the secret file content
							// (see https://www.jenkins.io/doc/book/pipeline/syntax/#supported-credentials-type):
							KEYRING = credentials("secret-subkeys-${PROJECT == 'platform' ? 'releng': PROJECT}.asc")
						}
						steps {
							dir("publish-${PROJECT}"){
								sh '''
									GIT_REL_PATH="${WORKSPACE}/git-repo/eclipse.platform.releng/publish-to-maven-central"
									SCRIPT=${GIT_REL_PATH}/publishProject.sh
									
									cp ${GIT_REL_PATH}/project-pom.xml .
									chmod 744 ${SCRIPT}
									${SCRIPT}
								'''
							}
						}
					}
				}
			}
		}
	}
	post {
		always {
			archiveArtifacts allowEmptyArchive: true, artifacts: '\
				repo/**, baseline-next.txt, \
				repo-validation/coordinates.txt,\
				publish-*/.log/*'
		}
		unsuccessful {
			emailext subject: "Publication of Maven artifacts failed",
				body: "Please go to ${BUILD_URL}console and check the build failure.", mimeType: 'text/plain',
				to: 'platform-releng-dev@eclipse.org', from:'genie.releng@eclipse.org'
		}
	}
}