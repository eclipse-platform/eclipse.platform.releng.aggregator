pipeline {
	options {
		skipDefaultCheckout()
		timestamps()
		timeout(time: 15, unit: 'MINUTES')
		buildDiscarder(logRotator(numToKeepStr:'5'))
	}
	agent {
		label 'basic'
	}
	stages {
		stage('Process Input') {
			steps {
				script {
					if (!params.releaseBuildID) {
						error "Required parameter 'releaseBuildID' is not defined."
					}
					env.RELEASE_ID = params.releaseBuildID.trim()
					def releaseIDMatcher = RELEASE_ID =~ /(?<type>[SR])-(?<major>\d+)\.(?<minor>\d+)(.\d+)?((M|RC)\d+[a-z]?)?-\d{12}/
					if (!releaseIDMatcher.matches()) {
						error "releaseID: ${RELEASE_ID}, does not match the expected pattern."
					}
					env.RELEASE_TYPE = releaseIDMatcher.group('type')
					env.RELEASE_VERSION_MAJOR = releaseIDMatcher.group('major')
					env.RELEASE_VERSION_MINOR = releaseIDMatcher.group('minor')
					dropIDMatcher = null // release matcher as it's not serializable
				}
				sh '''
					echo 'Input parameters read successfully'
					echo "RELEASE_ID='$RELEASE_ID'"
					echo "RELEASE_TYPE='$RELEASE_TYPE'"
					echo "RELEASE_VERSION_MAJOR='$RELEASE_VERSION_MAJOR'"
					echo "RELEASE_VERSION_MINOR='$RELEASE_VERSION_MINOR'"
				'''
			}
		}
		stage('Make Download page visible') {
			steps {
				sshagent(['projects-storage.eclipse.org-bot-ssh']) {
					sh '''#!/bin/bash -xe
						# Build machine locations (would very seldom change)
						DOWNLOAD_ROOT=${DOWNLOAD_ROOT:-/home/data/httpd/download.eclipse.org}
						ARCHIVE_ROOT=${ARCHIVE_ROOT:-/home/data/httpd/archive.eclipse.org} 
						ECLIPSE_MARKER="eclipse/downloads/drops4/${RELEASE_ID}/buildHidden"
						EQUINOX_MARKER="equinox/drops/${RELEASE_ID}/buildHidden"
						SSH_PREFIX="ssh genie.releng@projects-storage.eclipse.org"
						
						${SSH_PREFIX} rm --force "${DOWNLOAD_ROOT}/${ECLIPSE_MARKER}"
						${SSH_PREFIX} rm --force "${DOWNLOAD_ROOT}/${EQUINOX_MARKER}"
						
						if [[ "${RELEASE_TYPE}" == 'R' ]]; then
							${SSH_PREFIX} rm --force "${ARCHIVE_ROOT}/${ECLIPSE_MARKER}"
							${SSH_PREFIX} rm --force "${ARCHIVE_ROOT}/${EQUINOX_MARKER}"
						fi
					'''
				}
				build job: 'Releng/updateIndex', wait: false
			}
		}
		stage('Make Release Repository visible') {
			when {
				environment name: 'RELEASE_TYPE', value: 'R'
			}
			steps {
				build job: 'Releng/modifyP2CompositeRepository', wait: true, propagate: true, parameters: [
					string(name: 'repositoryPath', value: "eclipse/updates/${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR}"),
					string(name: 'add', value: "${RELEASE_ID}")
				]
			}
		}
	}
}
