// Constants read by job creation
private static final _JOB_DESCRIPTION = '''\
This job does the "stage 1" or first part of a promotion.
It renames the files for Equinox and Eclipse, creates an appropriate repo on 'downloads', sync's everything to 'downloads', but leave everything "invisible" -- unless someone knows the exact URL.
This allows two things. First, allows artifacts some time to "mirror" when that is needed.
But also, allows the sites and repositories to be examined for correctness before making them visible to the world.
The second (deferred) step that makes things visible works, in part, based on some output of this first step.
'''

pipeline {
	options {
		skipDefaultCheckout()
		timestamps()
		timeout(time: 120, unit: 'MINUTES')
		buildDiscarder(logRotator(numToKeepStr:'10'))
	}
	parameters {
		booleanParam(name: 'DRY_RUN', defaultValue: true,
			description: 'If enabled, the final publication of all changes is skipped. Useful for debugging and to very that the pipeline behaves as intended.')
		string(name: 'DROP_ID', trim: true, description: '''\
			The name (or, build id) of the build to promote. Typically would be a value such as 'I20250714-1800'.
			It must match the name of the build on the build machine.
		''')
		string(name: 'CHECKPOINT', trim: true, description: 'M1, M3, RC1, RC2, RC3 etc (blank for final releases).')
		string(name: 'SIGNOFF_BUG', trim: true, description: 'The issue that was used to "signoff" the checkpoint. If there are no unit test failures, this can be left blank. Otherwise a link is added to test page explaining that "failing unit tests have been investigated".')
	}
	agent {
		label 'basic'
	}
	environment {
		// Download Server locations (would very seldom change)
		EP_ROOT = '/home/data/httpd/download.eclipse.org'
		DRY_RUN_PREFIX = "${params.DRY_RUN ? 'eclipse/try-outs/' : ''}"
	}
	tools {
		jdk 'temurin-jdk21-latest'
		maven 'apache-maven-latest'
	}
	stages {
		stage('Process input') {
			steps {
				script {
					echo "DRY_RUN: ${DRY_RUN}"
					echo "DROP_ID: ${DROP_ID}"
					echo "CHECKPOINT: ${CHECKPOINT}"
					echo "SIGNOFF_BUG: ${SIGNOFF_BUG}"
					def idMatcher = null
					if ((idMatcher = "${DROP_ID}" =~ /I(?<date>\d{8})-(?<time>\d{4})/).matches()) {
						assignEnvVariable('BUILD_LABEL', "${DROP_ID}")
					} else if ((idMatcher = "${DROP_ID}" =~ /S-(?<label>\d+\.\d+(\.\d+)?(M|RC)\d+[a-z]?)-(?<date>\d{8})(?<time>\d{4})/).matches()) {
						assignEnvVariable('BUILD_LABEL', idMatcher.group('label'))
						if ("${CHECKPOINT}") {
							error "Stable build DROP_ID=${DROP_ID} may only be promoted to release CHECKPOINT, which therefore must be empty: ${CHECKPOINT}"
						}
					} else {
						error "DROP_ID, ${DROP_ID}, did not match any expected pattern."
					}
					def buildTimestamp = idMatcher.group('date') + idMatcher.group('time')
					assignEnvVariable('REPO_ID', "I${idMatcher.group('date')}-${idMatcher.group('time')}")
					idMatcher = null // release matcher as it's not serializable
					
					def buildPropertiesTxt = sh(script: "curl --fail https://download.eclipse.org/eclipse/downloads/drops4/${DROP_ID}/buildproperties.txt", returnStdout: true)
					def buildProperties = readProperties(text: buildPropertiesTxt)
					assignEnvVariable('BUILD_MAJOR', buildProperties.STREAMMajor.replace('"','')) // Remove surrounding quotes
					assignEnvVariable('BUILD_MINOR', buildProperties.STREAMMinor.replace('"','')) // Remove surrounding quotes
					assignEnvVariable('BUILD_SERVICE', buildProperties.STREAMService.replace('"','')) // Remove surrounding quotes
					
					if ("${CHECKPOINT}" ==~ /M\d+([a-z])?/ || "${CHECKPOINT}" ==~ /RC\d+([a-z])?/) { // milestone or RC promotion
						assignEnvVariable('DL_TYPE', 'S')
					} else if ("${CHECKPOINT}".isEmpty()) { // release promotion
						assignEnvVariable('DL_TYPE', 'R')
					} else {
						error "CHECKPOINT, ${CHECKPOINT}, did not match any expected pattern."
					}
					
					assignEnvVariable('DL_LABEL', "${BUILD_SERVICE}" == '0' // For initial releases, do not include service in label
						? "${BUILD_MAJOR}.${BUILD_MINOR}${CHECKPOINT}"
						: "${BUILD_MAJOR}.${BUILD_MINOR}.${BUILD_SERVICE}${CHECKPOINT}"
					)
					// This is DL_DROP_ID for Eclipse and Equinox
					assignEnvVariable('DL_DROP_ID', "${DL_TYPE}-${DL_LABEL}-${buildTimestamp}")
					assignEnvVariable('MAINTENANCE_BRANCH', "R${BUILD_MAJOR}_${BUILD_MINOR}_maintenance")
					
					if ("${SIGNOFF_BUG}".isEmpty()) {
						echo '''\
							[WARNING] SIGNOFF_BUG was not defined. That is valid if no Unit Tests failures but otherwise should be defined.
							Can be added by hand to buildproperties.php in drop site, if in fact there were errors, and simply forgot to specify.
						'''.stripIndent()
					} else if ("${SIGNOFF_BUG}" ==~ '\\d+') {
						assignEnvVariable('SIGNOFF_BUG', "https://github.com/eclipse-platform/eclipse.platform.releng.aggregator/issues/${SIGNOFF_BUG}")
					}
					
					if (params.DRY_RUN) { // Clear 'try-outs' area on the starge server
						sshagent(['projects-storage.eclipse.org-bot-ssh']) {
							sh 'ssh genie.releng@projects-storage.eclipse.org "rm -rf ${EP_ROOT}/eclipse/try-outs/"'
						}
					}
				}
			}
		}
		stage('Checkout SCM') {
			steps {
				dir("${WORKSPACE}/repository") {
					checkout scm
					script { // Always load the script from the very same state this pipeline is loaded (to ensure consistency)
						utilities = load "JenkinsJobs/shared/utilities.groovy"
						utilities.setDryRun(params.DRY_RUN)
						githubAPI = load "JenkinsJobs/shared/githubAPI.groovy"
						githubAPI.setDryRun(params.DRY_RUN)
					}
					sh '''#!/bin/bash -xe
						git branch --force master HEAD
						if [[ "${DL_TYPE}" == 'R' ]]; then
							git fetch origin "refs/heads/${MAINTENANCE_BRANCH}"
							
							git reflog show master
							git reflog show "origin/${MAINTENANCE_BRANCH}"
						fi
						
						git fetch origin tag "${REPO_ID}"
						git checkout "${REPO_ID}"
						# Check out all submodules at the specified REPO_ID
						git submodule update --init --recursive --depth 1
						
						git config --global user.email 'releng-bot@eclipse.org'
						git config --global user.name 'Eclipse Releng Bot'
					'''
				}
			}
		}
		stage('Move and rename Pages') {
			steps {
				sshagent(['projects-storage.eclipse.org-bot-ssh']) {
					
					echo 'Promote Equinox'
					dir("${WORKSPACE}/equinox") {
						renameBuildDrop('equinox/drops', "${DROP_ID}", "${BUILD_LABEL}", "${DL_DROP_ID}", "${DL_LABEL}")
					}
					
					echo 'Promote Eclipse'
					dir("${WORKSPACE}/eclipse") {
						renameBuildDrop('eclipse/downloads/drops4', "${DROP_ID}", "${BUILD_LABEL}", "${DL_DROP_ID}", "${DL_LABEL}") {
							sh '''
								echo "\\$NEWS_ID = \\"${BUILD_MAJOR}.${BUILD_MINOR}\\";" >> 'buildproperties.php'
								echo "\\$ACK_ID = \\"${BUILD_MAJOR}.${BUILD_MINOR}\\";" >> 'buildproperties.php'
								echo "\\$README_ID = \\"${BUILD_MAJOR}.${BUILD_MINOR}\\";" >> 'buildproperties.php'
								
								# SIGNOFF_BUG should not be defined if there are no JUnit failures to investigate and explain
								if [[ -n "${SIGNOFF_BUG}" ]]; then
									echo -e "<p>Any unit test failures below have been investigated and found to be test-related and do not affect the quality of the build.\\nSee the <a href=\\"${SIGNOFF_BUG}\\">sign-off page</a> for details.</p>" > 'testNotes.html'
								fi
							'''
						}
					}
				}
			}
		}
		stage('Tag Build') {
			environment {
				TAG = "${DL_TYPE}${BUILD_MAJOR}_${BUILD_MINOR}${(CHECKPOINT || BUILD_SERVICE != '0') ? ('_' + BUILD_SERVICE) : ''}${CHECKPOINT ? ('_' + CHECKPOINT) : ''}"
			}
			steps {
				dir("${WORKSPACE}/repository") {
					script {
						utilities.runHereAndForEachGitSubmodule{
							// Enforce the (re-)creation of the tag in case of a very late respin
							sh 'git tag --force --annotate --message="${SIGNOFF_BUG}" ${TAG} HEAD'
							utilities.gitPushTag("${TAG}", /*force*/ true)
						}
					}
				}
			}
		}
		stage('Promote P2 Repository') {
			when {
				environment name: 'DL_TYPE', value: 'R'
			}
			steps {
				dir("${WORKSPACE}/updates") {
					sshagent(['projects-storage.eclipse.org-bot-ssh']) {
						sh '''#!/bin/bash -xe
							sourceRepo="eclipse/updates/${BUILD_MAJOR}.${BUILD_MINOR}-I-builds/${REPO_ID}"
							targetRepo="${DRY_RUN_PREFIX}eclipse/updates/${BUILD_MAJOR}.${BUILD_MINOR}/${DL_DROP_ID}"
							ssh genie.releng@projects-storage.eclipse.org mkdir -p "${EP_ROOT}/${targetRepo}/.."
							ssh genie.releng@projects-storage.eclipse.org cp -r "${EP_ROOT}/${sourceRepo}/." "${EP_ROOT}/${targetRepo}"
							
							MIRRORS_URL="https://www.eclipse.org/downloads/download.php?file=/${targetRepo}"
							mvn tycho-p2-repository:modify-repository-properties -Pp2-repository-modification \\
								--file ${WORKSPACE}/repository/eclipse-platform-parent/pom.xml \\
								-Dp2.repository.location=https://download.eclipse.org/${sourceRepo}/ \\
								-Dp2.repository.output=$(pwd)/output \\
								-Dp2.repository.kind=artifact \\
								-Dp2.repository.mirrorsURL=${MIRRORS_URL}
							
							scp output/artifacts.* genie.releng@projects-storage.eclipse.org:${EP_ROOT}/${targetRepo}
						'''
					}
				}
			}
		}
		stage('Update build configurations') {
			when {
				environment name: 'DL_TYPE', value: 'R'
			}
			environment {
				RELEASE_P2_REPOSITORY = "https://download.eclipse.org/eclipse/updates/${BUILD_MAJOR}.${BUILD_MINOR}/${DL_DROP_ID}/"
			}
			steps {
				dir("${WORKSPACE}/repository") {
					script { // Update the master branch
						sh 'git checkout master'
						sh '''
							mvn -f eclipse-platform-parent/pom.xml tycho-versions:set-property \
								-Dproperties=previous-release.baseline \
								-DnewPrevious-release.baseline="${RELEASE_P2_REPOSITORY}"
						'''
						utilities.replaceAllInFile('cje-production/buildproperties.txt', [
							'BASEBUILDER_TAG=".*?"' : "BASEBUILDER_TAG=\"${BUILD_MAJOR}.${BUILD_MINOR}\"",
							'API_PREV_REF_LABEL=".*?"' : "API_PREV_REF_LABEL=\"${BUILD_MAJOR}.${BUILD_MINOR}\"",
							'PREVIOUS_RELEASE_VER=".*?"' : "PREVIOUS_RELEASE_VER=\"${BUILD_MAJOR}.${BUILD_MINOR}\"",
							'PREVIOUS_RELEASE_REPO_ID=".*?"' : "PREVIOUS_RELEASE_REPO_ID=\"${BUILD_MAJOR}.${BUILD_MINOR}\"",
							'BASEBUILD_ID=".*?"' : "BASEBUILD_ID=\"${DL_DROP_ID}\"",
							'PREVIOUS_RELEASE_ID=".*?"' : "PREVIOUS_RELEASE_ID=\"${DL_DROP_ID}\"",
						])
						utilities.replaceAllInFile('eclipse.platform.releng.tychoeclipsebuilder/eclipse-junit-tests/src/main/resources/equinoxp2tests.properties', [
							'eclipse-platform-\\d+.\\d+[^-]*?-' : "eclipse-platform-${BUILD_MAJOR}.${BUILD_MINOR}-",
							'org.eclipse.equinox.p2.tests.last.release.build.repo=.*' : "org.eclipse.equinox.p2.tests.last.release.build.repo=https://download.eclipse.org/equinox/drops/${DL_DROP_ID}/",
						])
						utilities.replaceAllInFile('eclipse.platform.releng.tychoeclipsebuilder/eclipse-junit-tests/src/main/resources/label.properties', [
							'previousReleaseVersion=.*' : "previousReleaseVersion=${BUILD_MAJOR}.${BUILD_MINOR}",
						])
						utilities.replaceAllInFile('production/testScripts/configuration/streamSpecific.properties', [
							'previousReleaseLocation=.*' : 'previousReleaseLocation=https://\\${DOWNLOAD_HOST}/eclipse/downloads/drops4/' + DL_DROP_ID + '/',
							'previousReleaseVersion=.*' : "previousReleaseVersion=${BUILD_MAJOR}.${BUILD_MINOR}",
							'previousReleaseVersionRepo=.*' : "previousReleaseVersionRepo=${BUILD_MAJOR}.${BUILD_MINOR}",
						])
						utilities.modifyJSON('JenkinsJobs/buildConfigurations.json') { builds ->
							// Remove old I/Y-build jobs for this release
							builds.values().each{ build -> build.streams.remove("${BUILD_MAJOR}.${BUILD_MINOR}") }
						}
						
						utilities.gitCommitAllExcludingSubmodules("Update previous release version to ${BUILD_MAJOR}.${BUILD_MINOR} GA across build scripts")
					}
					script { // Update the maintenance branch
						sh 'git checkout -b updateMaintenance "origin/${MAINTENANCE_BRANCH}"'
						def ecjManifest = sh(script: "curl --fail https://raw.githubusercontent.com/eclipse-jdt/eclipse.jdt.core/refs/tags/${REPO_ID}/org.eclipse.jdt.core.compiler.batch/META-INF/MANIFEST.MF", returnStdout: true).trim()
						def bundleVersion = readManifest(text: ecjManifest).main['Bundle-Version']
						def ecjVersion = bundleVersion.substring(0, bundleVersion.indexOf('.qualifier'))
						sh """
							mvn -f eclipse-platform-parent/pom.xml tycho-versions:set-property \
								-Dproperties=eclipse-sdk-repo,previous-release.baseline,cbi-ecj-version \
								-DnewEclipse-sdk-repo="${RELEASE_P2_REPOSITORY}" \
								-DnewPrevious-release.baseline="${RELEASE_P2_REPOSITORY}" \
								-DnewCbi-ecj-version="${ecjVersion}"
						"""
						utilities.replaceAllInFile('cje-production/buildproperties.txt', [
							'ECLIPSE_RUN_REPO="https://download.eclipse.org/eclipse/updates/.*"' : "ECLIPSE_RUN_REPO=\"${RELEASE_P2_REPOSITORY}\"",
						])
						utilities.gitCommitAllExcludingSubmodules("Update ${MAINTENANCE_BRANCH} branch with release version for ${BUILD_MAJOR}_${BUILD_MINOR}+ changes")
					}
					// Switch back to master for subsequent parts of this pipeline
					sh 'git checkout master'
					
					// Display created commits
					sh '''#!/bin/bash -xe
						git log origin/master..master --patch-with-stat --summary
						git log origin/${MAINTENANCE_BRANCH}..updateMaintenance --patch-with-stat --summary
					'''
					script { // Push branches and create PRs agains the master and maintenance branch
						utilities.gitPushBranch('master', "update-build-to-R${BUILD_MAJOR}.${BUILD_MINOR}", /*force*/ true)
						utilities.gitPushBranch('updateMaintenance', "update-${MAINTENANCE_BRANCH}", /*force*/ true)
						
						def masterPR = githubAPI.createPullRequest('eclipse-platform/eclipse.platform.releng.aggregator',
							"Update previous release version to ${BUILD_MAJOR}.${BUILD_MINOR} GA across build scripts", """\
							Update the the `${MAINTENANCE_BRANCH}` branch with final ${BUILD_MAJOR}.${BUILD_MINOR} release version.
							
							**This should not be submitted before ${BUILD_MAJOR}.${BUILD_MINOR} is finally released.**
							""".stripIndent(),"update-build-to-R${BUILD_MAJOR}.${BUILD_MINOR}", 'master', /*skipExistingPR*/ true)
						
						githubAPI.createPullRequest('eclipse-platform/eclipse.platform.releng.aggregator',
							"Update ${MAINTENANCE_BRANCH} branch with release version for ${BUILD_MAJOR}_${BUILD_MINOR}+ changes", """\
							Update the the `${MAINTENANCE_BRANCH}` branch with final ${BUILD_MAJOR}.${BUILD_MINOR} release version.
							This complements:
							- ${masterPR}
							
							**This should not be submitted before ${BUILD_MAJOR}.${BUILD_MINOR} is finally released.**
							""".stripIndent(),"update-${MAINTENANCE_BRANCH}", "${MAINTENANCE_BRANCH}", /*skipExistingPR*/ true)
					}
				}
			}
		}
		stage('Stage to Maven-Central') {
			when {
				allOf {
					environment name: 'DL_TYPE', value: 'R'
					not { expression { params.DRY_RUN } }
				}
			}
			steps {
				build job: 'Releng/deployToMaven', wait: true, propagate: true, parameters: [
					string(name: 'sourceRepository', value: "https://download.eclipse.org/eclipse/updates/${BUILD_MAJOR}.${BUILD_MINOR}/${DL_DROP_ID}/")
				]
			}
		}
		stage('Update acknowledgements') {
			when {
				not { expression { params.DRY_RUN } }
			}
			steps {
				script {
					githubAPI.triggerWorkflow('eclipse-platform/www.eclipse.org-eclipse', 'generateAcknowledgements.yml', [ 'eclipse-version': "${BUILD_MAJOR}.${BUILD_MINOR}" ])
				}
			}
		}
		stage('Publish promoted build') {
			when {
				allOf {
					not { environment name: 'DL_TYPE', value: 'R' }
					not { expression { params.DRY_RUN } }
				}
			}
			steps {
				build job: 'Releng/publishPromotedBuild', wait: true, propagate: true, parameters: [
					string(name: 'releaseBuildID', value: "${DL_DROP_ID}")
				]
			}
		}
	}
	post {
		always {
			archiveArtifacts artifacts: '**/*', excludes: 'repository/**'
		}
	}
}

def renameBuildDrop(String baseDropPath, String oldDropID, String oldBuildLabel, String newDropID, String newBuildLabel, Closure extraTasks=null) {
	def sourcePath="${EP_ROOT}/${baseDropPath}/${oldDropID}"
	def targetPath="${EP_ROOT}/${env.DRY_RUN_PREFIX ?: ''}${baseDropPath}/${newDropID}"
	
	sh """#!/bin/bash -xe
		
		# Copy drop-directory to new location
		ssh genie.releng@projects-storage.eclipse.org mkdir -p '${targetPath}'
		# Create this marker first to ensure the page is never without
		ssh genie.releng@projects-storage.eclipse.org touch '${targetPath}/buildHidden'
		
		ssh genie.releng@projects-storage.eclipse.org cp -r '${sourcePath}/.' '${targetPath}'
		
		# Rename files
		echo 'Rename files at new location from *${oldBuildLabel}* to *${newBuildLabel}*.'
		# References to locally defined variables required double escaping
		# because they are escaped for groovy and the bash HERE document.
		# In general this section is very fragile! Only change with great caution and extensive testing!
		ssh genie.releng@projects-storage.eclipse.org << EOF
			set -xe
			cd "${targetPath}"
			files=\\\$(find . -mindepth 1 -maxdepth 2 -name "*${oldBuildLabel}*" -print)
			echo " \\\$(echo "\\\$files" | wc -l) files found to rename."
			
			for file in \\\${files}; do
				if [[ \\\$file =~ (.*)(${oldBuildLabel})(.*) ]]; then
					mv "\\\$file" "\\\${BASH_REMATCH[1]}${newBuildLabel}\\\${BASH_REMATCH[3]}"
				fi
			done
#DO NOT INDENT EOF!
EOF
		
		#Update checksums to new filenames
		ssh genie.releng@projects-storage.eclipse.org sed --in-place --expression 's/${oldBuildLabel}/${newBuildLabel}/g' ${targetPath}/checksum/*
	"""
	
	// Update buildproperties.php to new names
	def newTypeName = null
	if ("${DL_TYPE}" == 'R') {
		newTypeName = 'Release'
	} else if (newBuildLabel.contains('RC')) {
		newTypeName = 'Release Candidate'
	} else if ("${DL_TYPE}" == 'S') {
		newTypeName = 'Stable'
	} else {
		error "Unexpected DL_TYPE value, ${DL_TYPE}"
	}
	def newProperties = [
		BUILD_ID: "${newBuildLabel}",
		BUILD_TYPE: "${DL_TYPE}",
		BUILD_TYPE_NAME: "${newTypeName}",
		BUILD_DIR_SEG: "${newDropID}",
		EQ_BUILD_DIR_SEG: "${newDropID}",
	]
	def buildPropertiesPHP = sh(returnStdout: true, script: "ssh genie.releng@projects-storage.eclipse.org cat ${sourcePath}/buildproperties.php")
	for (entry in newProperties) {
		buildPropertiesPHP = buildPropertiesPHP.replaceFirst('\\$' + entry.key + ' = "[^"]+"', '\\$' + entry.key + ' = "' + entry.value + '"')
	}
	writeFile(file: 'buildproperties.php', text: buildPropertiesPHP)
	
	if (extraTasks) {
		extraTasks()
	}
	sh """#!/bin/bash -xe
		# Copy locally modified files to the download server
		scp -r . genie.releng@projects-storage.eclipse.org:${targetPath}/
		
		if [[ '${DL_TYPE}' == 'R' ]] && [[ '${DRY_RUN}' == 'false' ]]; then
			echo 'Creating archive'
			ssh genie.releng@projects-storage.eclipse.org cp -r '${targetPath}' /home/data/httpd/archive.eclipse.org/${baseDropPath}/
		fi
	"""
}

@groovy.transform.Field
def utilities = null
@groovy.transform.Field
def githubAPI = null

@NonCPS
def assignEnvVariable(String name, String value) {
	env."${name}" = value
	println("${name}=${value}")
}
