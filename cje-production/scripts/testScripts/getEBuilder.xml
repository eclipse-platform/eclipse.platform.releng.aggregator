<?xml version="1.0" encoding="UTF-8"?>
<!--
  A utility ant script get the eclipse builder from Git. 

  Hudson jobs can call this script from ant as one of it first build steps.
  Such as, start with a wget fetch from CGit (where following $dash; is literally a '-',
  it is escaped here just for XML rules against two dashes in a comment);

  wget -O getEBuilder.xml &dash;&dash;no-verbose https://download.eclipse.org/eclipse/relengScripts/production/testScripts/hudsonBootstrap/getEBuilder.xml
  2>&1

  Then use ant to invoke the functionality. Example:

  ant -f getEBuilder.xml -EBUILDER_HASH=910fca82df3ea649ba8ee758259561582e13bf8b

-->
<project
  name="getEBuilder"
  default="getEBuilder"
  basedir=".">


  <target
    name="init"
    unless="getEBuilderInitialized">

    <!-- assign defaults if not on jenkins, for local testing if nothing else -->
    <property environment="env" />
    <condition
      property="WORKSPACE"
      value="${env.WORKSPACE}"
      else="${basedir}">
      <isset property="env.WORKSPACE" />
    </condition>

    <!-- normally provided by caller, but if not, assume master -->
    <property
      name="EBUILDER_HASH"
      value="master" />

    <property
      name="scmProject"
      value="eclipse.platform.releng.aggregator" />

    <property
      name="eScriptLocation"
      value="${scmProject}/production/testScripts" />

    <echo message="=== Properties in 'getEBuilder.xml'" />
    <echo message="    WORKSPACE: ${WORKSPACE}" />
    <echo message="    scmProject: ${scmProject}" />
    <echo message="    eScriptLocation: ${eScriptLocation}" />
    <echo message="    EBUILDER_HASH: ${EBUILDER_HASH}" />
    <echo message="    downloadURL: ${downloadURL}" />

    <property
      name="getEBuilderInitialized"
      value="true" />
  </target>


  <target
    name="getEBuilder"
    depends="init">

    <delete dir="${WORKSPACE}/${folderName}" />
    <mkdir dir="${WORKSPACE}/${folderName}" />

    <antcall target="fetchEBuilder" />
    <antcall target="EBuildercleanup" />

    <ant antfile="${WORKSPACE}/${eScriptLocation}/runTests2.xml" />

  </target>


  <target
    name="fetchEBuilder"
    depends="init"
    if="downloadURL"
    unless="EBuilderfetched">
    <echo message="Fetching pre-made EBuilder subset from download site." />
    <get
      src="${downloadURL}/${scmProject}-${EBUILDER_HASH}.zip"
      dest="${WORKSPACE}"
      httpusecaches="false"
      verbose="true" />

    <available
      file="${WORKSPACE}/${scmProject}-${EBUILDER_HASH}.zip"
      property="EzipExists" />

    <antcall target="unzipDownloadedZip" />

    <condition property="EBuilderfetched">
      <available file="${WORKSPACE}/${scmProject}/production" />
    </condition>

  </target>

  <target
    name="unzipDownloadedZip"
    if="EzipExists">

    <echo message="Fetched EBuilder from ${downloadURL}" />
    <unzip
      src="${WORKSPACE}/${scmProject}-${EBUILDER_HASH}.zip"
      dest="${WORKSPACE}"
      overwrite="true" />

  </target>

  <!-- specify -DnoEBuildercleanup=true on command line, to have zip and folder left in place,
    such as for debugging or desired to copy the zip to your local cache.
  -->
  <target
    name="EBuildercleanup"
    unless="noEBuildercleanup">

    <!-- we've moved the files, now to remove the empty dir -->
    <delete
      dir="${WORKSPACE}/${scmProject}-${EBUILDER_HASH}"
      failonerror="false" />

    <!-- cleanup (may eventually want to "cache" this zip file, so no need to re-fetch if already exists -->
    <delete
      file="${WORKSPACE}/${scmProject}-${EBUILDER_HASH}.zip"
      failonerror="false" />

    <delete
      dir="${WORKSPACE}/tempEBuilder"
      failonerror="false" />
    <echo message="Cleaned temporary working copies" />

  </target>

</project>